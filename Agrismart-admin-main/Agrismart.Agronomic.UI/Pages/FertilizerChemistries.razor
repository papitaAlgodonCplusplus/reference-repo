@page "/fertilizerchemistries"

@using Agrismart.Agronomic.UI.Services.Models;
@using Agrismart.Agronomic.UI.Pages.Components
@using Agrismart.Agronomic.UI.Pages.InputValidators
@using Agrismart.Agronomic.UI.Services.Interfaces
@using Agrismart.Agronomic.UI.Services.Requests
@using Agrismart.Agronomic.UI.Services.Requests.Commands
@using Agrismart.Agronomic.UI.Services.Requests.Queries
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

@inject IFertilizerChemistryService _fertilizerChemistryService
@inject IFertilizerService _fertilizerService

<PageTitle>Químicos de Fertilizantes</PageTitle>

<h2>Lista de Químicos de Fertilizantes</h2>
<hr />

<AlertMessage Title="Mensaje de sistema" @ref="@alertCreateMessage">
    <div class="alert alert-success">
        <p>Químico creado con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Mensaje de sistema" @ref="@alertUpdateMessage">
    <div class="alert alert-success">
        <p>Químico actualizado con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Error de sistema" @ref="@alertErrorMessage">
    <div class="alert alert-danger">
        <p><label>Hubo un error en la aplicación. Informe al administrador</label></p>
    </div>
</AlertMessage>


@if (!createNew)
{
    <div class="container-fluid">
        <div class="row align-items-end">
            <div class="col-2">
                <label>Fertilizante:</label>
                <InputSelect id="fertilizersList" @bind-Value="@selectedFertilizerId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todos</option>
                    @foreach (var fertilizer in fertilizers)
                    {
                        <option value="@fertilizer.Id">@fertilizer.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label class="form-check-label">Solo Activos</label>
                <input type="checkbox" id="onlyActivesCheck" checked @bind-value="@onlyActives" class="form-check-input" />
            </div>
            <div class="col-2">
                <button class="btn btn-primary" @onclick="GetFertilizerChemistriesClick">Consultar</button>
            </div>
            <div class="col-2">
                <button class="btn btn-secondary" @onclick="NewFertilizerChemistryClick">Nuevo</button>
            </div>
            <div class="col-2" />

        </div>
    </div>
}
else
{
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <div class="container-fluid">
            <div class="row align-items-end">
                <div class="col-1">
                    <label>Fertilizante:</label>
                    <InputSelect @bind-Value="@newFertilizerChemistry.FertilizerId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var fertilizer in fertilizers)
                        {
                            <option value="@fertilizer.Id">@fertilizer.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-1">
                    <label>Pureza:</label>
                    <InputNumber @bind-Value="@newFertilizerChemistry.Purity" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Densidad:</label>
                    <InputNumber @bind-Value="@newFertilizerChemistry.Density" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Solubilidad0:</label>
                    <InputNumber @bind-Value="@newFertilizerChemistry.Solubility0" style="width: 100%" />
                </div>
                <div class="col-1">
                    <label>Solubilidad20:</label>
                    <InputNumber @bind-Value="@newFertilizerChemistry.Solubility20" style="width: 100%" />
                </div>
                <div class="col-1">
                    <label>Solubilidad40:</label>
                    <InputNumber @bind-Value="@newFertilizerChemistry.Solubility40" style="width: 100%" />
                </div>
                <div class="col-1">
                    <label>Formula:</label>
                    <InputText @bind-Value="@newFertilizerChemistry.Formula" style="width: 100%" />
                </div>
                <div class="col-1">
                    <label>Valencia:</label>
                    <InputNumber @bind-Value="@newFertilizerChemistry.Valence" style="width: 100%" />
                </div>
                <div class="col-1">
                    <label>Controlador de PH:</label>
                    <InputCheckbox @bind-Value="@newFertilizerChemistry.IsPhAdjuster" style="width: 100%" />
                </div>
                <div class="col-2">
                    <button class="btn btn-primary" @onclick="AddFertilizerChemistryClick">Agregar</button>
                    <button class="btn btn-danger" @onclick="CancelAddFertilizerChemistryClick">Cancelar</button>
                </div>
            </div>
            @if (!valid)
            {
                <div class="row p-3">
                    <div class="alert alert-warning col-8" role="alert">
                        Debe seleccionar o digitar algun valor para los atributos marcados en rojo
                    </div>
                </div>
            }
        </div>
    </EditForm>
}
<hr />

@if (fertilizerChemistries == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else
{
    <QuickGrid Items="@fertilizerChemistries" Pagination="@pagination">
        <TemplateColumn Title="Id" Class="tinyColumn">
            <label>@context.Id</label>
        </TemplateColumn>
        <TemplateColumn Title="Fertilizante" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <InputSelect id="fertilizerList" @bind-Value="@context.FertilizerId" style="width: 100%">

                    @foreach (var fertilizer in fertilizers)
                    {
                        <option value="@fertilizer.Id">@fertilizer.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label>@context.Fertilizer</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Pureza" Class="normalColumn" Sortable="true">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Purity" />
            }
            else
            {
                <label>@context.Purity</label>
            }
        </TemplateColumn>
        <TemplateColumn Class="normalColumn" Title="Densidad">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Density" />
            }
            else
            {
                <label>@context.Density</label>
            }
        </TemplateColumn>
        <TemplateColumn Class="normalColumn" Title="Solubilidad0">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Solubility0" />
            }
            else
            {
                <label>@context.Solubility0</label>
            }
        </TemplateColumn>
        <TemplateColumn Class="normalColumn" Title="Solubilidad20">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Solubility20" />
            }
            else
            {
                <label>@context.Solubility20</label>
            }
        </TemplateColumn>
        <TemplateColumn Class="normalColumn" Title="Solubilidad40">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Solubility40" />
            }
            else
            {
                <label>@context.Solubility40</label>
            }
        </TemplateColumn>
        <TemplateColumn Class="normalColumn" Title="Formula">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Formula" />
            }
            else
            {
                <label>@context.Formula</label>
            }
        </TemplateColumn>
        <TemplateColumn Class="normalColumn" Title="Valencia">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Valence" />
            }
            else
            {
                <label>@context.Valence</label>
            }
        </TemplateColumn>
        <TemplateColumn Class="normalColumn" Title="Controlador de PH">
            @if (context.Id == editableId)
            {
                <input type="checkbox" @bind="@context.IsPhAdjuster" />
            }
            else
            {
                @if (context.IsPhAdjuster)
                {
                    <i class="bi bi-toggle-on" />
                }
                else
                {
                    <i class="bi bi-toggle-off" />
                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Activo" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input type="checkbox" @bind="@context.Active" />
            }
            else
            {
                @if (context.Active)
                {
                    <i class="bi bi-toggle-on" />
                }
                else
                {
                    <i class="bi bi-toggle-off" />
                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Acciones" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <button @onclick="@(() => SaveClick(@context))"><i class="bi bi-floppy-fill"></i></button>
                <button @onclick="@(() => CancelEditClick())"><i class="bi bi-x-circle-fill"></i></button>
            }
            else
            {
                <button @onclick="@(() => EditClick(@context.Id))"><i class="bi bi-pencil-square"></i></button>
            }
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@pagination" />
}

@code {

    #region Main

    public class FertilizerChemistryModel
    {
        public int Id { get; set; }
        public int FertilizerId { get; set; }
        public string? Fertilizer { get; set; }
        public double Purity { get; set; }
        public double Density { get; set; }
        public double Solubility0 { get; set; }
        public double Solubility20 { get; set; }
        public double Solubility40 { get; set; }
        public string? Formula { get; set; }
        public int Valence { get; set; }
        public bool IsPhAdjuster { get; set; }
        public bool Active { get; set; }
    }

    private AlertMessage? alertErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            editContext = new EditContext(newFertilizerChemistry);

            var getAllFertilizersResult = await _fertilizerService.GetAll(new GetAllFertilizersRequest() { IncludeInactives = false });
            fertilizers = getAllFertilizersResult.Fertilizers.ToList();

            await GetFertilizerChemistriesClick();
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region Search of FertilizerChemistries

    private IQueryable<FertilizerChemistryModel>? fertilizerChemistries;
    public int selectedFertilizerId = 0;
    public bool onlyActives = true;
    public List<Fertilizer> fertilizers = new List<Fertilizer>();
    PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };

    public async Task GetFertilizerChemistriesClick()
    {
        fertilizerChemistries = null;
        List<FertilizerChemistryModel> fertilizerChemistriesList = new List<FertilizerChemistryModel>();
        try
        {

            var getAllFertilizerCHemistriesResult = await _fertilizerChemistryService.GetAll(new GetAllFertilizerChemistriesRequest() { FertilizerId = selectedFertilizerId, IncludeInactives = !onlyActives });

            if (getAllFertilizerCHemistriesResult.FertilizerChemistries != null)
            {
                getAllFertilizerCHemistriesResult.FertilizerChemistries.ToList().ForEach(fc => fertilizerChemistriesList.Add(new FertilizerChemistryModel()
                    {
                        Id = fc.Id,
                        FertilizerId = fc.FertilizerId,
                        Fertilizer = fertilizers.Where(f => f.Id == fc.FertilizerId).FirstOrDefault().Name,
                        Purity = fc.Purity,
                        Density = fc.Density,
                        Solubility0 = fc.Solubility0,
                        Solubility20 = fc.Solubility20,
                        Solubility40 = fc.Solubility40,
                        Formula = fc.Formula,
                        Valence = fc.Valence,
                        IsPhAdjuster = fc.IsPhAdjuster,
                        Active = fc.Active
                    }));

                fertilizerChemistries = fertilizerChemistriesList.AsQueryable();
            }
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
            fertilizerChemistries = fertilizerChemistriesList.AsQueryable();
        }
    }

    #endregion

    #region New FertilizerChemistry

    public EditContext? editContext;
    public FertilizerChemistryModel newFertilizerChemistry = new FertilizerChemistryModel();
    public bool createNew = false;
    public int newCatalogId = 0;
    bool valid = true;
    private AlertMessage alertCreateMessage { get; set; }

    public async Task NewFertilizerChemistryClick()
    {
        createNew = true;
        valid = true;
        ClearNewModel();
    }

    public async Task CancelAddFertilizerChemistryClick()
    {
        createNew = false;
        valid = true;
    }

    public async Task AddFertilizerChemistryClick()
    {
        try
        {
            valid = editContext.Validate();
            if (valid)
            {
                var createFertilizerChemistryResult = await _fertilizerChemistryService.Create(new CreateFertilizerChemistryRequest()
                    {
                        FertilizerId = newFertilizerChemistry.FertilizerId,
                        Purity = newFertilizerChemistry.Purity,
                        Density = newFertilizerChemistry.Density,
                        Solubility0 = newFertilizerChemistry.Solubility0,
                        Solubility20 = newFertilizerChemistry.Solubility20,
                        Solubility40 = newFertilizerChemistry.Solubility40,
                        Formula = newFertilizerChemistry.Formula,
                        Valence = newFertilizerChemistry.Valence,
                        IsPhAdjuster = newFertilizerChemistry.IsPhAdjuster
                    });
                if (createFertilizerChemistryResult != null)
                {
                    alertCreateMessage.Open();
                    await GetFertilizerChemistriesClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                CancelAddFertilizerChemistryClick();
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void ClearNewModel()
    {
        newFertilizerChemistry.FertilizerId = 0;
       
    }

    #endregion

    #region Edit FertilizerChemistry

    public int editableId = 0;
    private AlertMessage alertUpdateMessage { get; set; }

    void EditClick(int id) => editableId = id;

    void CancelEditClick() => editableId = 0;

    private async Task SaveClick(FertilizerChemistryModel fertilizerChemistryToSave)
    {
        try
        {
            fertilizerChemistries = null;
            var updateFertilizerChemistryResult = await _fertilizerChemistryService.Update(new UpdateFertilizerChemistryRequest()
                {
                    Id = fertilizerChemistryToSave.Id,
                    FertilizerId = fertilizerChemistryToSave.FertilizerId,
                    Purity = fertilizerChemistryToSave.Purity,
                    Density = fertilizerChemistryToSave.Density,
                    Solubility0 = fertilizerChemistryToSave.Solubility0,
                    Solubility20 = fertilizerChemistryToSave.Solubility20,
                    Solubility40 = fertilizerChemistryToSave.Solubility40,
                    Formula = fertilizerChemistryToSave.Formula,
                    Valence = fertilizerChemistryToSave.Valence,
                    IsPhAdjuster = fertilizerChemistryToSave.IsPhAdjuster,
                    Active = fertilizerChemistryToSave.Active
                });
            if (updateFertilizerChemistryResult != null)
            {
                alertUpdateMessage.Open();
                await GetFertilizerChemistriesClick();
            }
            else
            {
                alertErrorMessage.Open();
            }
            editableId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    #endregion
}
