@page "/ProductionUnits"

@using Agrismart.Agronomic.UI.Services.Models
@using Agrismart.Agronomic.UI.Pages.Components
@using Agrismart.Agronomic.UI.Services.Interfaces
@using Agrismart.Agronomic.UI.Services.Requests
@using Agrismart.Agronomic.UI.Services.Requests.Commands
@using Agrismart.Agronomic.UI.Services.Requests.Queries
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@attribute [Authorize]

@inject ICompanyService _companyService
@inject IFarmService _farmService
@inject IProductionUnitTypeService _productionUnitTypeService
@inject IProductionUnitService _productionUnitService

<PageTitle>Unidades de Producción</PageTitle>

<h2>Lista de Unidades de Producción</h2>
<hr />

<AlertMessage Title="Mensaje de sistema" @ref="@alertCreateMessage">
    <div class="alert alert-success">
        <p>Unidad de Producción creada con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Mensaje de sistema" @ref="@alertUpdateMessage">
    <div class="alert alert-success">
        <p>Unidad de Producción actualizada con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Error de sistema" @ref="@alertErrorMessage">
    <div class="alert alert-danger">
        <p><label>Hubo un error en la aplicación. Informe al administrador</label></p>
    </div>
</AlertMessage>

@if (!createNew)
{
    <div class="container-fluid">
        <div class="row align-items-end">
            <div class="col-2">
                <label>Compañía:</label>
                <InputSelect id="companiesList" ValueChanged="@((int value)=>ChangeCompanyIdForSearch(value))" ValueExpression="@(()=>selectedCompanyId)" Value="selectedCompanyId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todas</option>
                    @foreach (var company in companies)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label>Finca:</label>
                <InputSelect id="farmsList" ValueChanged="@((int value)=>ChangeFarmIdForSearch(value))" ValueExpression="@(()=>selectedFarmId)" Value="selectedFarmId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todas</option>
                    @foreach (var farm in farms)
                    {
                        <option value="@farm.Id">@farm.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label class="form-check-label">Solo Activas</label>
                <input type="checkbox" id="onlyActivesCheck" checked @bind-value="@onlyActives" class="form-check-input" />
            </div>
            <div class="col-2">
                <button class="btn btn-primary" @onclick="GetProductionUnitsClick">Consultar</button>
            </div>
            <div class="col-2">
                <button class="btn btn-secondary" @onclick="NewProductionUnitClick">Nueva</button>
            </div>
            <div class="col-2" />

        </div>
    </div>
}
else
{        
    <EditForm EditContext="editContext">
    <DataAnnotationsValidator />
    <div class="container-fluid">
        <div class="row align-items-end">
            <div class="col-1">
                <label>Compañía:</label>
                <InputSelect ValueChanged="@((int value)=>ChangeCompanyIdForNew(value))" ValueExpression="@(()=>newCompanyId)" Value="newCompanyId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Seleccione una opción</option>
                    @foreach (var company in companies)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-1">
                <label>Finca:</label>
                <InputSelect @bind-Value="@newProductionUnit.FarmId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Seleccione una opción</option>
                    @foreach (var farm in farmsForNew)
                    {
                        <option value="@farm.Id">@farm.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-1">
                <label>Tipo Unidad de Producción:</label>
                <InputSelect @bind-Value="@newProductionUnit.ProductionUnitTypeId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Seleccione una opción</option>
                    @foreach (var productionUnitType in productionUnitTypes)
                    {
                            <option value="@productionUnitType.Id">@productionUnitType.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label>Nombre:</label>
                <InputText @bind-Value="@newProductionUnit.Name" style="width: 100%" type="text" class="form-control form-control-sm" />
            </div>
            <div class="col-2">
                <label>Descripción:</label>
                <InputText @bind-Value="@newProductionUnit.Description" style="width: 100%" type="text" class="form-control form-control-sm" />
            </div>
            <div class="col-2">
                <button class="btn btn-primary" @onclick="AddProductionUnitClick">Agregar</button>
                <button class="btn btn-danger" @onclick="CancelAddProductionUnitClick">Cancelar</button>
            </div>
         </div>
        @if (!valid)
        {
            <div class="row p-3">
                <div class="alert alert-warning col-8" role="alert">
                    Debe seleccionar o digitar algun valor para los atributos marcados en rojo
                </div>
            </div>
        }
    </div>
    </EditForm>
}

<hr />

@if (productionUnits == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else
{
    <QuickGrid Items="@productionUnits" Pagination="@pagination">
        <TemplateColumn Title="Id" Class="tinyColumn">
            <label>@context.Id</label>
        </TemplateColumn>
        <TemplateColumn Title="Tipo Unidad de Producción" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <InputSelect id="productionUnitTypeList" @bind-Value="@context.ProductionUnitTypeId" style="width: 100%">

                    @foreach (var productionUnitType in productionUnitTypes)
                    {
                        <option value="@productionUnitType.Id">@productionUnitType.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label>@context.ProductionUnitType</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Nombre" Class="normalColumn" Sortable="true">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Name" style="width: 100%" />
            }
            else
            {
                <label>@context.Name</label>
            }
        </TemplateColumn>

        <TemplateColumn Title="Descripción" Class="bigColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Description" style="width: 100%" />
            }
            else
            {
                <label>@context.Description</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Activa" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input type="checkbox" @bind="@context.Active" />
            }
            else
            {
                @if (context.Active)
                {
                    <i class="bi bi-toggle-on" />
                }
                else
                {
                    <i class="bi bi-toggle-off" />

                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Acciones" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <button @onclick="@(() => SaveClick(@context))"><i class="bi bi-floppy-fill"></i></button>
                <button @onclick="@(() => CancelEditClick())"><i class="bi bi-x-circle-fill"></i></button>
            }
            else
            {
                <button @onclick="@(() => EditClick(@context.Id))"><i class="bi bi-pencil-square"></i></button>
            }
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@pagination" />
}

@code {

    #region Main

    public class ProductionUnitModel
    {
        public int Id { get; set; }
        public int FarmId { get; set; }
        public int ProductionUnitTypeId { get; set; }
        public string? ProductionUnitType { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public bool Active { get; set; }            
    }

    private AlertMessage? alertErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            editContext = new EditContext(newProductionUnit);

            var getAllCompaniesResult = await _companyService.GetAll(new GetAllCompaniesRequest() { IncludeInactives = false });
            companies = getAllCompaniesResult.Companies.ToList();

            var getAllProductionUnitTypesResult = await _productionUnitTypeService.GetAll(new GetAllProductionUnitTypesRequest() { IncludeInactives = true });
            productionUnitTypes = getAllProductionUnitTypesResult.ProductionUnitTypes.ToList();

            await GetProductionUnitsClick();
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region Search of ProductionUnits

    public int selectedCompanyId = 0;
    public int selectedFarmId = 0;
    public bool onlyActives = true;
    public List<Company> companies = new List<Company>();
    public List<Farm> farms = new List<Farm>();
    public List<ProductionUnitType> productionUnitTypes = new List<ProductionUnitType>();
    private IQueryable<ProductionUnitModel>? productionUnits;
    PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };

    private async Task ChangeCompanyIdForSearch(int selectedCompanyId)
    {
        try
        {
            this.selectedCompanyId = selectedCompanyId;
            var getAllFarmsResult = await _farmService.GetAll(new GetAllFarmsRequest() { CompanyId = selectedCompanyId, IncludeInactives = false });
            farms = getAllFarmsResult?.Farms.ToList();
            if (this.selectedCompanyId == 0) farms.Clear();
            this.selectedFarmId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    private async Task ChangeFarmIdForSearch(int selectedFarmId)
    {
        try
        {
            this.selectedFarmId = selectedFarmId;
        }
        catch (Exception ex)
        {
        }
    }

    public async Task GetProductionUnitsClick()
    {
        productionUnits = null;
        List<ProductionUnitModel> productionUnitsList = new List<ProductionUnitModel>();
        try
        {            
            var getAllProductionUnitsResult = await _productionUnitService.GetAll(new GetAllProductionUnitsRequest() { CompanyId = selectedCompanyId, FarmId = selectedFarmId, IncludeInactives = !onlyActives });

            if (getAllProductionUnitsResult.ProductionUnits != null)
            {

                getAllProductionUnitsResult.ProductionUnits.ToList().ForEach(pu => productionUnitsList.Add(new ProductionUnitModel() 
                { 
                    Id = pu.Id, 
                    FarmId = pu.FarmId, 
                    ProductionUnitTypeId = pu.ProductionUnitTypeId,
                    ProductionUnitType = productionUnitTypes.Where(put => put.Id == pu.ProductionUnitTypeId).FirstOrDefault().Name, 
                    Name = pu.Name, 
                    Description = pu.Description, 
                    Active = pu.Active 
                }));
                productionUnits = productionUnitsList.AsQueryable();
            }
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
            productionUnits = productionUnitsList.AsQueryable();
        }
    }

    #endregion

    #region New ProductionUnit

    public EditContext? editContext;
    public ProductionUnitModel newProductionUnit = new ProductionUnitModel();
    public List<Farm> farmsForNew = new List<Farm>();
    public bool createNew = false;
    public int newCompanyId = 0;
    bool valid = true;
    private AlertMessage? alertCreateMessage { get; set; }

    public async Task NewProductionUnitClick()
    {
        createNew = true;
        valid = true;
        ClearNewModel();
    }

    private async Task ChangeCompanyIdForNew(int selectedCompanyId)
    {
        try
        {
            newCompanyId = selectedCompanyId;
            var getAllFarmResult = await _farmService.GetAll(new GetAllFarmsRequest() { CompanyId = selectedCompanyId, IncludeInactives = false });
            farmsForNew = getAllFarmResult.Farms.ToList();
            if (newCompanyId == 0) farmsForNew.Clear();
        }
        catch (Exception ex)
        {
        }
    }

    public async Task CancelAddProductionUnitClick()
    {
        createNew = false;
        valid = true;
    }

    public async Task AddProductionUnitClick()
    {
        try
        {
            valid = editContext.Validate();
            if (valid)
            {
                productionUnits = null;
                var createProductionUnitResult = await _productionUnitService.Create(new CreateProductionUnitRequest()
                {
                    FarmId = newProductionUnit.FarmId,
                    ProductionUnitTypeId = newProductionUnit.ProductionUnitTypeId,
                    Name = newProductionUnit.Name,
                    Description = newProductionUnit.Description
                });
                if (createProductionUnitResult != null)
                {
                    alertCreateMessage.Open();
                    await GetProductionUnitsClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                CancelAddProductionUnitClick();
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void ClearNewModel()
    {
        newCompanyId = 0;
        newProductionUnit.FarmId = 0;
        newProductionUnit.ProductionUnitTypeId = 0;
        newProductionUnit.Name = string.Empty;
        newProductionUnit.Description = string.Empty;
    }

    #endregion

    #region Edit Farm

    public int editableId = 0;
    private AlertMessage? alertUpdateMessage { get; set; }

    void EditClick(int id) => editableId = id;

    void CancelEditClick() => editableId = 0;

    private async Task SaveClick(ProductionUnitModel productionUnitToSave)
    {
        try
        {
            productionUnits = null;
            var updateProductionUnitResult = await _productionUnitService.Update(new UpdateProductionUnitRequest()
                {
                    Id = productionUnitToSave.Id,
                    ProductionUnitTypeId = productionUnitToSave.ProductionUnitTypeId,
                    Name = productionUnitToSave.Name,
                    Description = productionUnitToSave.Description,
                    Active = productionUnitToSave.Active
                });
            if (updateProductionUnitResult != null)
            {
                alertUpdateMessage.Open();
                await GetProductionUnitsClick();
            }
            else
            {
                alertErrorMessage.Open();
            }
            editableId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    #endregion
}