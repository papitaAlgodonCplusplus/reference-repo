@page "/Sensors"

@using Agrismart.Agronomic.UI.Services.Models
@using Agrismart.Agronomic.UI.Pages.Components
@using Agrismart.Agronomic.UI.Pages.InputValidators
@using Agrismart.Agronomic.UI.Services.Interfaces
@using Agrismart.Agronomic.UI.Services.Requests
@using Agrismart.Agronomic.UI.Services.Requests.Commands
@using Agrismart.Agronomic.UI.Services.Requests.Queries
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

@inject ICompanyService _companyService
@inject IMeasurementVariableService _measurementVariableService
@inject IDeviceService _deviceService
@inject ISensorService _sensorService
@inject ICatalogService _catalogService

<PageTitle>Sensores</PageTitle>

<h2>Lista de Sensores</h2>
<hr />

<AlertMessage Title="Mensaje de sistema" @ref="@alertCreateMessage">
    <div class="alert alert-success">
        <p>Sensor creado con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Mensaje de sistema" @ref="@alertUpdateMessage">
    <div class="alert alert-success">
        <p>Sensor actualizado con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Error de sistema" @ref="@alertErrorMessage">
    <div class="alert alert-danger">
        <p><label>Hubo un error en la aplicación. Informe al administrador</label></p>
    </div>
</AlertMessage>

@if (!createNew)
{
    <div class="container-fluid">
        <div class="row align-items-end">
            <div class="col-2">
                <label>Compañía:</label>
                <InputSelect id="companiesList" ValueChanged="@((int value)=>ChangeCompanyIdForSearch(value))" ValueExpression="@(()=>selectedCompanyId)" Value="selectedCompanyId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todas</option>
                    @foreach (var company in companies)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label>Dispositivo:</label>
                <InputSelect id="devicesList" @bind-Value="@selectedDeviceId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todos</option>
                    @foreach (var device in devices)
                    {
                        <option value="@device.Id">@device.DeviceId</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label class="form-check-label">Solo Activas</label>
                <input type="checkbox" id="onlyActivesCheck" checked @bind-value="@onlyActives" class="form-check-input" />
            </div>
            <div class="col-2">
                <button class="btn btn-primary" @onclick="GetSensorsClick">Consultar</button>
            </div>
            <div class="col-2">
                <button class="btn btn-secondary" @onclick="NewSensorClick">Nuevo</button>
            </div>
            <div class="col-2" />

        </div>
    </div>
}
else
{
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <div class="container-fluid">
            <div class="row align-items-end">
                <div class="col-1">
                    <label>Compañía:</label>
                    <InputSelect ValueChanged="@((int value)=>ChangeCompanyIdForNew(value))" ValueExpression="@(()=>newCompanyId)" Value="newCompanyId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var company in companies)
                        {
                            <option value="@company.Id">@company.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-2">
                    <label>Dispositivo:</label>
                    <InputSelect id="devicesForNew" @bind-Value="@newSensor.DeviceId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var device in devicesForNew)
                        {
                            <option value="@device.Id">@device.DeviceId</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-1">
                    <label>Etiqueta:</label>
                    <InputText @bind-Value="@newSensor.SensorLabel" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Descripción:</label>
                    <InputText @bind-Value="@newSensor.Description" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Catálogo:</label>
                    <InputSelect ValueChanged="@((int value)=>ChangeCatalogIdForNew(value))" ValueExpression="@(()=>newCatalogId)" Value="newCatalogId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var catalog in catalogsForNew)
                        {
                            <option value="@catalog.Id">@catalog.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-2">
                    <label>Variable de medición:</label>
                    <InputSelect id="devicesForNew" @bind-Value="@newSensor.MeasurementVariableId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var measurementVariable in measurementVariablesForNew)
                        {
                            <option value="@measurementVariable.Id">@measurementVariable.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-1">
                    <label>Cantidad de Contenedores:</label>
                    <InputNumber @bind-Value="@newSensor.NumberOfContainers" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-2">
                    <button class="btn btn-primary" @onclick="AddSensorClick">Agregar</button>
                    <button class="btn btn-danger" @onclick="CancelAddSensorClick">Cancelar</button>
                </div>
            </div>
            @if (!valid)
            {
                <div class="row p-3">
                    <div class="alert alert-warning col-8" role="alert">
                        Debe seleccionar o digitar algun valor para los atributos marcados en rojo
                    </div>
                </div>
            }
        </div>
    </EditForm>
}
<hr />

@if (sensors == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else
{
    <QuickGrid Items="@sensors" Pagination="@pagination">
        <TemplateColumn Title="Id" Class="tinyColumn">
            <label>@context.Id</label>
        </TemplateColumn>
        <TemplateColumn Title="Etiqueta" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.SensorLabel" />
            }
            else
            {
                <label>@context.SensorLabel</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Descripcion" Class="bigColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Description" />
            }
            else
            {
                <label>@context.Description</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Catalogo" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <InputSelect ValueChanged="@((int value)=>ChangeCatalogIdForSearch(value))" ValueExpression="@(()=>selectedCatalogId)" Value="selectedCatalogId" style="width: 100%" class="form-select form-select-sm">

                    @foreach (var catalog in catalogs)
                    {
                        if (@catalog.Id == context.CatalogId)
                        {
                            <option value="@catalog.Id" selected>@catalog.Name</option>
                        }
                        else
                        {
                            <option value="@catalog.Id">@catalog.Name</option>
                        }
                    }
                </InputSelect>
            }
            else
            {
                <label>@context.Catalog</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Variable de Medición">
            @if (context.Id == editableId)
            {
                <InputSelect Class="normalColumn" id="measurementVariablesList" @bind-Value="@context.MeasurementVariableId">

                    @foreach (var measurementVariable in measurementVariablesForSearch)
                    {
                        <option value="@measurementVariable.Id">@measurementVariable.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label Class="normalColumn">@context.MeasurementVariable</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Cantidad Contenedores" Class="smallColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.NumberOfContainers" />
            }
            else
            {
                <label>@context.NumberOfContainers</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Activa" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input type="checkbox" @bind="@context.Active" />
            }
            else
            {
                @if (context.Active)
                {
                    <i class="bi bi-toggle-on" />
                }
                else
                {
                    <i class="bi bi-toggle-off" />

                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Acciones" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <button @onclick="@(() => SaveClick(@context))"><i class="bi bi-floppy-fill"></i></button>
                <button @onclick="@(() => CancelClick())"><i class="bi bi-x-circle-fill"></i></button>
            }
            else
            {
                <button @onclick="@(() => Edit(@context.Id, @context.CatalogId))"><i class="bi bi-pencil-square"></i></button>
            }
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@pagination" />
}

@code {

    #region Main

    public class SensorModel
    {
        public int Id { get; set; }
        [Required]
        public int DeviceId { get; set; }
        public string? SensorLabel { get; set; }
        public string? Description { get; set; }
        public int CatalogId { get; set; }
        public string? Catalog { get; set; }
        public int MeasurementVariableId { get; set; }
        public string? MeasurementVariable { get; set; }
        public int NumberOfContainers { get; set; }
        public bool Active { get; set; }
    }

    private AlertMessage? alertErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            editContext = new EditContext(newSensor);

            var getAllCompaniesResult = await _companyService.GetAll(new GetAllCompaniesRequest() { IncludeInactives = false });
            companies = getAllCompaniesResult.Companies.ToList();

            var getAllCatalogsResult = await _catalogService.GetAll(new GetAllCatalogsRequest() { IncludeInactives = false });
            catalogsForNew = getAllCatalogsResult.Catalogs.ToList();

            catalogs = getAllCatalogsResult.Catalogs.ToList();

            var getAllMeasurementVariablesResult = await _measurementVariableService.GetAll(new GetAllMeasurementVariablesRequest() { IncludeInactives = false });
            allMeasurementVariables = getAllMeasurementVariablesResult.MeasurementVariables.ToList();

            await GetSensorsClick();
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region Search of sensors

    public int selectedCompanyId = 0;
    public int selectedDeviceId = 0;
    public int selectedCatalogId = 0;
    private IQueryable<SensorModel>? sensors;

    public List<Company> companies = new List<Company>();
    public List<Catalog> catalogs = new List<Catalog>();
    public List<MeasurementVariable> allMeasurementVariables = new List<MeasurementVariable>();
    public List<MeasurementVariable> measurementVariablesForSearch = new List<MeasurementVariable>();
    public List<Device> devices = new List<Device>();
    public bool onlyActives = true;

    PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };

    private async Task ChangeCompanyIdForSearch(int selectedCompanyId)
    {
        try
        {
            this.selectedCompanyId = selectedCompanyId;
            var getAllDevicesResult = await _deviceService.GetAll(new GetAllDevicesRequest() { CompanyId = selectedCompanyId, IncludeInactives = false });
            devices = getAllDevicesResult?.Devices.ToList();
            if (this.selectedCompanyId == 0) devices.Clear();
            this.selectedDeviceId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    private async Task ChangeCatalogIdForSearch(int selectedCatalogId)
    {
        try
        {
            this.selectedCatalogId = selectedCatalogId;
            var getAllMeasurementVariablesResult = await _measurementVariableService.GetAll(new GetAllMeasurementVariablesRequest() { CatalogId = selectedCatalogId, IncludeInactives = false });
            measurementVariablesForSearch = getAllMeasurementVariablesResult.MeasurementVariables.ToList();
            if (this.selectedCatalogId == 0) measurementVariablesForSearch.Clear();
        }
        catch (Exception ex)
        {
        }
    }

    public async Task GetSensorsClick()
    {
        sensors = null;
        List<SensorModel> sensorsList = new List<SensorModel>();
        try
        {
            var getAllSensorsResult = await _sensorService.GetAll(new GetAllSensorsRequest() { CompanyId = selectedCompanyId, DeviceId = selectedDeviceId, IncludeInactives = !onlyActives });

            getAllSensorsResult.Sensors.ToList().ForEach(d => sensorsList.Add(new SensorModel()
                {
                    Id = d.Id,
                    DeviceId = d.DeviceId,
                    SensorLabel = d.SensorLabel,
                    Description = d.Description,
                    CatalogId = allMeasurementVariables.Where(mv => mv.Id == d.MeasurementVariableId).FirstOrDefault().CatalogId,
                    Catalog = catalogs.Where(c => c.Id == allMeasurementVariables.Where(mv => mv.Id == d.MeasurementVariableId).FirstOrDefault().CatalogId).FirstOrDefault().Name,
                    MeasurementVariableId = d.MeasurementVariableId,
                    MeasurementVariable = allMeasurementVariables.Where(mv => mv.Id == d.MeasurementVariableId).FirstOrDefault().Name,
                    NumberOfContainers = d.NumberOfContainers,
                    Active = d.Active
                }));

            sensors = sensorsList.AsQueryable();
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
            sensors = sensorsList.AsQueryable();
        }
    }

    #endregion

    #region New sensor

    public EditContext editContext;
    public SensorModel newSensor = new SensorModel();
    public int newCompanyId = 0;
    public int newCatalogId = 0;
    public bool createNew = false;
    bool valid = true;
    public List<Device> devicesForNew = new List<Device>();
    public List<Catalog> catalogsForNew = new List<Catalog>();
    public List<MeasurementVariable> measurementVariablesForNew = new List<MeasurementVariable>();
    private AlertMessage alertCreateMessage { get; set; }

    private async Task ChangeCompanyIdForNew(int selectedCompanyId)
    {
        try
        {
            newCompanyId = selectedCompanyId;
            var getAllDevicesResult = await _deviceService.GetAll(new GetAllDevicesRequest() { CompanyId = selectedCompanyId, IncludeInactives = false });
            devicesForNew = getAllDevicesResult.Devices.ToList();
            if (newCompanyId == 0) devicesForNew.Clear();

        }
        catch (Exception ex)
        {
        }
    }


    private async Task ChangeCatalogIdForNew(int selectedCatalogId)
    {
        try
        {
            newCatalogId = selectedCatalogId;

            var getAllMeasurementVariablesResult = await _measurementVariableService.GetAll(new GetAllMeasurementVariablesRequest() { CatalogId = selectedCatalogId, IncludeInactives = false });
            measurementVariablesForNew = getAllMeasurementVariablesResult.MeasurementVariables.ToList();
            if (newCatalogId == 0) measurementVariablesForNew.Clear();

        }
        catch (Exception ex)
        {
        }
    }

    public async Task NewSensorClick()
    {
        createNew = true;
        valid = true;
        ClearNewModel();
    }

    public async Task AddSensorClick()
    {
        try
        {
            valid = editContext.Validate();
            if (valid)
            {
                sensors = null;
                var createSensorResult = await _sensorService.Create(new CreateSensorRequest()
                    {
                        DeviceId = newSensor.DeviceId,
                        SensorLabel = newSensor.SensorLabel,
                        Description = newSensor.Description,
                        MeasurementVariableId = newSensor.MeasurementVariableId,
                        NumberOfContainers = newSensor.NumberOfContainers,

                    });

                if (createSensorResult != null)
                {
                    alertCreateMessage.Open();
                    await GetSensorsClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                CancelAddSensorClick();
            }
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
        }                
    }

    public async Task CancelAddSensorClick()
    {
        createNew = false;
        valid = true;
    }

    private void ClearNewModel()
    {
        newCompanyId = 0;
        newSensor.DeviceId = 0;
        newSensor.Description = string.Empty;
        newSensor.SensorLabel = string.Empty;
        newSensor.MeasurementVariableId = 0;
    }

    #endregion

    #region Edit Sensor

    public bool validEdit = true;
    public int editableId = 0;
    private AlertMessage alertUpdateMessage { get; set; }

    private string validateStyleSensorLabel = "";
    private string validateStyleDescription = "";
    private string validateStyleDeviceRx = "";

    async Task Edit(int id, int catalogId) {
        await ChangeCatalogIdForSearch(catalogId);
        editableId = id;
        this.selectedCatalogId = catalogId;        
    }

    void CancelClick() => editableId = 0;

    private async Task SaveClick(SensorModel sensorToSave)
    {
        sensors = null;
        try
        {
            ICollection<ValidationResult> results = null;

            if (ModelValidator.Validate(sensorToSave, out results))
            {
                var updateSensorResult = await _sensorService.Update(new UpdateSensorRequest()
                    {
                        Id = sensorToSave.Id,
                        DeviceId = sensorToSave.DeviceId,                       
                        SensorLabel = sensorToSave.SensorLabel,
                        Description = sensorToSave.Description,
                        MeasurementVariableId = sensorToSave.MeasurementVariableId,
                        NumberOfContainers = sensorToSave.NumberOfContainers,
                        Active = sensorToSave.Active
                    });
                if (updateSensorResult != null)
                {
                    alertUpdateMessage.Open();
                    await GetSensorsClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                editableId = 0;
            }
            else
            {
                foreach (ValidationResult result in results)
                {
                    if (result.MemberNames.Contains("SensorLabel")) validateStyleSensorLabel = "border: 1px solid red;";
                    if (result.MemberNames.Contains("Description")) validateStyleDescription = "border: 1px solid red;";
                    if (result.MemberNames.Contains("DeviceRX")) validateStyleDeviceRx = "border: 1px solid red;";
                    validEdit = false;
                }
            }
        }
        catch (Exception ex)
        {
        }
    }
    #endregion
}