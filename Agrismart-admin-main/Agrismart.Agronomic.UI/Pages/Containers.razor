@page "/Containers"

@using Agrismart.Agronomic.UI.Services.Models;
@using Agrismart.Agronomic.UI.Pages.Components
@using Agrismart.Agronomic.UI.Services.Interfaces
@using Agrismart.Agronomic.UI.Services.Requests
@using Agrismart.Agronomic.UI.Services.Requests.Commands
@using Agrismart.Agronomic.UI.Services.Requests.Queries
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

@inject IContainerService _containerService
@inject ICatalogService _catalogService
@inject IContainerTypeService _containerTypeService

<PageTitle>Contenedores</PageTitle>

<h2>Lista de Contenedores</h2>
<hr />

<AlertMessage Title="Mensaje de sistema" @ref="@alertCreateMessage">
    <div class="alert alert-success">
        <p>Contenedor creado con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Mensaje de sistema" @ref="@alertUpdateMessage">
    <div class="alert alert-success">
        <p>Contenedor actualizado con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Error de sistema" @ref="@alertErrorMessage">
    <div class="alert alert-danger">
        <p><label>Hubo un error en la aplicación. Informe al administrador</label></p>
    </div>
</AlertMessage>


@if (!createNew)
{
    <div class="container-fluid">
        <div class="row align-items-end">
            <div class="col-2">
                <label>Catálogo:</label>
                <InputSelect id="catalogsList" @bind-Value="@selectedCatalogId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todos</option>
                    @foreach (var catalog in catalogs)
                    {
                        <option value="@catalog.Id">@catalog.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label class="form-check-label">Solo Activos</label>
                <input type="checkbox" id="onlyActivesCheck" checked @bind-value="@onlyActives" class="form-check-input" />
            </div>
            <div class="col-2">
                <button class="btn btn-primary" @onclick="GetContainersClick">Consultar</button>
            </div>
            <div class="col-2">
                <button class="btn btn-secondary" @onclick="NewContainerClick">Nuevo</button>
            </div>
            <div class="col-2" />

        </div>
    </div>
}

else
{
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <div class="container-fluid">
            <div class="row align-items-end">
                <div class="col-2">
                    <label>Catálogo:</label>
                    <InputSelect @bind-Value="@newContainer.CatalogId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var catalog in catalogs)
                        {
                            <option value="@catalog.Id">@catalog.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-1">
                    <label>Nombre:</label>
                    <InputText @bind-Value="@newContainer.Name" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Tipo:</label>
                    <InputSelect @bind-Value="@newContainer.ContainerTypeId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var containerType in containerTypes)
                        {
                            <option value="@containerType.Id">@containerType.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-1">
                    <label>Alto:</label>
                    <InputNumber @bind-Value="@newContainer.Height" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Ancho:</label>
                    <InputNumber @bind-Value="@newContainer.Width" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Largo:</label>
                    <InputNumber @bind-Value="@newContainer.Length" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Diámetro bajo:</label>
                    <InputNumber @bind-Value="@newContainer.LowerDiameter" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Diámetro Alto:</label>
                    <InputNumber @bind-Value="@newContainer.UpperDiameter" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-2">
                    <button class="btn btn-primary" @onclick="AddContainerClick">Agregar</button>
                    <button class="btn btn-danger" @onclick="CancelAddContainerClick">Cancelar</button>
                </div>
            </div>
            @if (!valid)
            {
                <div class="row p-3">
                    <div class="alert alert-warning col-8" role="alert">
                        Debe seleccionar o digitar algun valor para los atributos marcados en rojo
                    </div>
                </div>
            }
        </div>
    </EditForm>

}
<hr />


@if (containers == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else
{
    <QuickGrid Items="@containers" Pagination="@pagination">
        <TemplateColumn Title="Id">
            <label Class="tinyColumn">@context.Id</label>
        </TemplateColumn>
        <TemplateColumn Title="Catalogo">
            @if (context.Id == editableId)
            {
                <InputSelect Class="normalColumn" id="catalogList" @bind-Value="@context.CatalogId">

                    @foreach (var catalog in catalogs)
                    {
                        <option value="@catalog.Id">@catalog.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label Class="normalColumn">@context.Catalog</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Nombre">
            @if (context.Id == editableId)
            {
                <input Class="normalColumn" @bind="@context.Name" />
            }
            else
            {
                <label Class="normalColumn">@context.Name</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Tipo">
            @if (context.Id == editableId)
            {
                <InputSelect Class="normalColumn" id="containerTypeList" @bind-Value="@context.ContainerTypeId">
                    @foreach (var containerType in containerTypes)
                    {
                        <option value="@containerType.Id">@containerType.Name</option>
                    }
                </InputSelect>            
            }
            else
            {
                <label Class="normalColumn">@context.ContainerType</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Altura">
            @if (context.Id == editableId)
            {
                <input Class="normalColumn" @bind="@context.Height" />
            }
            else
            {
                <label Class="normalColumn">@context.Height</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Ancho">
            @if (context.Id == editableId)
            {
                <input Class="normalColumn" @bind="@context.Width" />
            }
            else
            {
                <label Class="normalColumn">@context.Width</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Largo">
            @if (context.Id == editableId)
            {
                <input Class="normalColumn" @bind="@context.Length" />
            }
            else
            {
                <label Class="normalColumn">@context.Length</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Diámetro bajo">
            @if (context.Id == editableId)
            {
                <input Class="normalColumn" @bind="@context.LowerDiameter" />
            }
            else
            {
                <label Class="normalColumn">@context.LowerDiameter</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Diámetro Alto">
            @if (context.Id == editableId)
            {
                <input Class ="normalColumn" @bind="@context.UpperDiameter" />
            }
            else
            {
                <label Class="normalColumn">@context.UpperDiameter</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Activo" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input type="checkbox" @bind="@context.Active" />
            }
            else
            {
                @if (context.Active)
                {
                    <i class="bi bi-toggle-on" />
                }
                else
                {
                    <i class="bi bi-toggle-off" />
                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Acciones" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <button @onclick="@(() => SaveClick(@context))"><i class="bi bi-floppy-fill"></i></button>
                <button @onclick="@(() => CancelEditClick())"><i class="bi bi-x-circle-fill"></i></button>
            }
            else
            {
                <button @onclick="@(() => EditClick(@context.Id))"><i class="bi bi-pencil-square"></i></button>
            }
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@pagination" />
} 
 
@code {

    #region Main

    public class ContainerModel
    {
        public int Id { get; set; }
        public int CatalogId { get; set; }
        public string? Catalog { get; set; }
        public string? Name { get; set; }
        public int ContainerTypeId { get; set; }
        public string? ContainerType { get; set; }
        public double Height { get; set; }
        public double Width { get; set; }
        public double Length { get; set; }
        public double LowerDiameter { get; set; }
        public double UpperDiameter { get; set; }
        public bool Active { get; set; }
    }

    private AlertMessage? alertErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            editContext = new EditContext(newContainer);

            var getAllCatalogsResult = await _catalogService.GetAll(new GetAllCatalogsRequest() { IncludeInactives = false });
            catalogs = getAllCatalogsResult.Catalogs.ToList();


            var getAllContainerTypesResult = await _containerTypeService.GetAll(new GetAllContainerTypesRequest() { IncludeInactives = false });
            containerTypes = getAllContainerTypesResult.ContainerTypes.ToList();

            await GetContainersClick();
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region Search of Containers

    private IQueryable<ContainerModel>? containers;
    public int selectedCatalogId = 0;
    public bool onlyActives = true;
    public List<Catalog> catalogs = new List<Catalog>();
    public List<ContainerType> containerTypes = new List<ContainerType>();
    PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };

    public async Task GetContainersClick()
    {
        containers = null;
        List<ContainerModel> containersList = new List<ContainerModel>();
        try
        {           

            var getAllContainersResult = await _containerService.GetAll(new GetAllContainersRequest() { CatalogId = selectedCatalogId, IncludeInactives = !onlyActives });

            if (getAllContainersResult.Containers != null)
            {
                getAllContainersResult.Containers.ToList().ForEach(c => containersList.Add(new ContainerModel()
                    {
                         
                        Id = c.Id,
                        CatalogId = c.CatalogId,
                        Name = c.Name,
                        Catalog = catalogs.Where(cat => cat.Id == c.CatalogId).FirstOrDefault().Name,      
                        ContainerTypeId = c.ContainerTypeId,
                        ContainerType = containerTypes.Where(cat => cat.Id == c.ContainerTypeId).FirstOrDefault().Name,
                        Height = c.Height,
                        Width = c.Width,
                        Length = c.Length,
                        LowerDiameter = c.LowerDiameter,
                        UpperDiameter = c.UpperDiameter,
                        Active = c.Active
                    }));

                containers = containersList.AsQueryable();
            }
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
            containers = containersList.AsQueryable();
        }
    }

    #endregion

    #region New Container

    public EditContext? editContext;
    public ContainerModel newContainer = new ContainerModel();
    public bool createNew = false;
    public int newCatalogId = 0;
    bool valid = true;
    private AlertMessage alertCreateMessage { get; set; }

    public async Task NewContainerClick()
    {
        createNew = true;
        valid = true;
        ClearNewModel();
    }

    public async Task CancelAddContainerClick()
    {
        createNew = false;
        valid = true;
    }

    public async Task AddContainerClick()
    {
        try
        {
            valid = editContext.Validate();
            if (valid)
            {
                var createContainerResult = await _containerService.Create(new CreateContainerRequest()
                    {
                        CatalogId = newContainer.CatalogId,
                        Name = newContainer.Name,
                        ContainerTypeId = newContainer.ContainerTypeId,
                        Height = newContainer.Height,
                        Width = newContainer.Width,
                        Length = newContainer.Length,
                        UpperDiameter = newContainer.UpperDiameter,
                        LowerDiameter = newContainer.LowerDiameter
                    });
                if (createContainerResult != null)
                {
                    alertCreateMessage.Open();
                    await GetContainersClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                CancelAddContainerClick();
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void ClearNewModel()
    {
        newContainer.CatalogId = 0;
        newContainer.ContainerTypeId = 0;
        newContainer.Height = 0;
        newContainer.Width = 0;
        newContainer.Length = 0;
        newContainer.LowerDiameter = 0;
        newContainer.UpperDiameter = 0;
    }

    #endregion

    #region Edit Container

    public int editableId = 0;
    private AlertMessage alertUpdateMessage { get; set; }

    void EditClick(int id) => editableId = id;

    void CancelEditClick() => editableId = 0;

    private async Task SaveClick(ContainerModel containerToSave)
    {
        try
        {
            containers = null;
            var updateContainerResult = await _containerService.Update(new UpdateContainerRequest()
                {
                    Id = containerToSave.Id,
                    CatalogId = containerToSave.CatalogId,
                    Name = containerToSave.Name,
                    ContainerTypeId = containerToSave.ContainerTypeId,
                    Height = containerToSave.Height,
                    Width = containerToSave.Width,
                    Length = containerToSave.Length,
                    UpperDiameter = containerToSave.UpperDiameter,
                    LowerDiameter = containerToSave.LowerDiameter,
                    Active = containerToSave.Active
                });
            if (updateContainerResult != null)
            {
                alertUpdateMessage.Open();
                await GetContainersClick();
            }
            else
            {
                alertErrorMessage.Open();
            }
            editableId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    #endregion
}