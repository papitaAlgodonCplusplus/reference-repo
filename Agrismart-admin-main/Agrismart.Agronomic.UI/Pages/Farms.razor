@page "/Farms"

@using Agrismart.Agronomic.UI.Services.Models
@using Agrismart.Agronomic.UI.Pages.Components
@using Agrismart.Agronomic.UI.Pages.InputValidators
@using Agrismart.Agronomic.UI.Services.Interfaces
@using Agrismart.Agronomic.UI.Services.Requests
@using Agrismart.Agronomic.UI.Services.Requests.Commands
@using Agrismart.Agronomic.UI.Services.Requests.Queries
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

@inject IClientService _clientService
@inject ICompanyService _companyService
@inject IFarmService _farmService
@inject ITimeZoneService _timeZoneService

<PageTitle>Fincas</PageTitle>

<h2>Lista de Fincas</h2>
<hr />

<AlertMessage Title="Mensaje de sistema" @ref="@alertCreateMessage">
    <div class="alert alert-success">
        <p>Finca creada con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Mensaje de sistema" @ref="@alertUpdateMessage">
    <div class="alert alert-success">
        <p>Finca actualizada con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Error de sistema" @ref="@alertErrorMessage">
    <div class="alert alert-danger">
        <p><label>Hubo un error en la aplicación. Informe al administrador</label></p>
    </div>
</AlertMessage>

@if (!createNew)
{
    <div class="container-fluid">
        <div class="row align-items-end">
            <AuthorizeView Roles="1">
                <div class="col-2">
                    <label>Cliente:</label>
                    <InputSelect id="clientsList" ValueChanged="@((int value)=>ChangeClientIdForSearch(value))" ValueExpression="@(()=>selectedClientId)" Value="@selectedClientId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Todos</option>
                        @foreach (var client in clients)
                        {
                            <option value="@client.Id">@client.Name</option>
                        }
                    </InputSelect>
                </div>
            </AuthorizeView>
            <div class="col-2">
                <label>Compañía:</label>
                <InputSelect id="companiesList" @bind-Value="@selectedCompanyId"  style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todas</option>
                    @foreach (var company in companies)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label class="form-check-label">Solo Activas</label>
                <input type="checkbox" id="onlyActivesCheck" checked @bind-value="@onlyActives" class="form-check-input" />
            </div>
            <div class="col-2">
                <button class="btn btn-primary" @onclick="GetFarmsClick">Consultar</button>
            </div>
            <div class="col-2">
                <button class="btn btn-secondary" @onclick="NewFarmClick">Nueva</button>
            </div>
            <div class="col-2" />

        </div>
    </div>
}
else
{
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <div class="container-fluid">
            <div class="row align-items-end">
                <div class="col-2">
                    <label>Cliente:</label>
                    <InputSelect ValueChanged="@((int value)=>ChangeClientIdForNew(value))" ValueExpression="@(()=>newClientId)" Value="@newClientId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var client in clients)
                        {
                            <option value="@client.Id">@client.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-2">
                    <label>Compañía:</label>
                    <InputSelect id="companiesList" @bind-Value="@newFarm.CompanyId" style="width: 100%" class="form-select form-select-sm" >
                        <option value="0">Seleccione una opción</option>
                        @foreach (var company in companiesForNew)
                        {
                            <option value="@company.Id">@company.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-2">
                    <label>Nombre:</label>
                    <InputText @bind-Value="@newFarm.Name" style="width: 100%" type="text" class="form-control form-control-sm" />
                </div>
                <div class="col-4">
                    <label>Descripción:</label>
                    <InputText @bind-Value="@newFarm.Description" style="width: 100%" type="text" class="form-control form-control-sm" />
                </div>
                <div class="col-2">
                    <label>Zona Horaria:</label>
                    <InputSelect id="timeZonesList" @bind-Value="@newFarm.TimeZoneId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var timeZone in timeZonesCatalog)
                        {
                            <option value="@timeZone.Id">@timeZone.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-2">
                    <button class="btn btn-primary" @onclick="AddFarmClick">Agregar</button>
                    <button class="btn btn-danger" @onclick="CancelAddFarmClick">Cancelar</button>
                </div>
            </div>
            @if (!valid)
            {
                <div class="row p-3">
                    <div class="alert alert-warning col-8" role="alert">
                        Debe seleccionar o digitar algun valor para los atributos marcados en rojo
                    </div>
                </div>
            }
        </div>
    </EditForm>
}

<hr />

@if (farms == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else
{
    <QuickGrid Items="@farms" Pagination="@pagination">
        <TemplateColumn Title="Id">
            <label Class="tinyColumn">@context.Id</label>
        </TemplateColumn>
        <TemplateColumn Title="Compañía">
            @if (context.Id == editableId && false)
            {
                <InputSelect Class="normalColumn" id="clientList" @bind-Value="@context.CompanyId" style="width: 100%">
                    @foreach (var company in companies)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label Class="normalColumn">@context.Company</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Nombre" Sortable="true">
            @if (context.Id == editableId)
            {
                <input Class="normalColumn" @bind="@context.Name" style="@validateStyleName" />
            }
            else
            {
                <label Class="normalColumn">@context.Name</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Descripción">
            @if (context.Id == editableId)
            {
                <input Class="hugeColumn" @bind="@context.Description" style="width: 100%" />
            }
            else
            {
                <label Class="hugeColumn">@context.Description</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Zona Horaria">
            @if (context.Id == editableId)
            {
                <InputSelect Class="normalColumn" id="timeZonesList" @bind-Value="@context.TimeZoneId" style="width: 100%">
                    @foreach (var timeZone in timeZonesCatalog)
                    {
                        <option value="@timeZone.Id">@timeZone.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label Class="normalColumn">@context.TimeZoneName</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Activa" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input type="checkbox" @bind="@context.Active" />
            }
            else
            {
                @if (context.Active)
                {
                    <i class="bi bi-toggle-on" />
                }
                else
                {
                    <i class="bi bi-toggle-off" />

                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Acciones" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <button @onclick="@(() => SaveClick(@context))"><i class="bi bi-floppy-fill"></i></button>
                <button @onclick="@(() => CancelEditClick())"><i class="bi bi-x-circle-fill"></i></button>
            }
            else
            {
                <button @onclick="@(() => EditClick(@context.Id))"><i class="bi bi-pencil-square"></i></button>
            }
        </TemplateColumn>
    </QuickGrid>
    @if (!validEdit)
    {
        <div class="row p-3">
            <div class="alert alert-warning col-8" role="alert">
                Debe seleccionar o digitar algún valor para los atributos marcados en rojo
            </div>
        </div>
    }

    <Paginator State="@pagination" />
}

@code {

    #region Main

    public class FarmModel
    {
        public int Id { get; set; }
        [Range(1, int.MaxValue, ErrorMessage = "Debe seleccionar una opción")]
        public int CompanyId { get; set; }
        public string? Company { get; set; }
        [Required]
        public string? Name { get; set; }
        [Required]
        public string? Description { get; set; }
        [Required]
        public int TimeZoneId { get; set; }
        public string? TimeZoneName { get; set; }
        public bool Active { get; set; }
    }

    private AlertMessage? alertErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            editContext = new EditContext(newFarm);

            var getAllClientsResult = await _clientService.GetAll(new GetAllClientsRequest() { IncludeInactives = false });
            clients = getAllClientsResult.Clients.ToList();

            var getAllCompaniesResult = await _companyService.GetAll(new GetAllCompaniesRequest() { IncludeInactives = false });
            companiesCatalog = getAllCompaniesResult.Companies.ToList();

            var getAllTimeZonesResult = await _timeZoneService.GetAll(new GetAllTimeZonesRequest() { IncludeInactives = false });
            timeZonesCatalog = getAllTimeZonesResult.TimeZones.ToList();

            await GetFarmsClick();
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region Search of farms

    private IQueryable<FarmModel>? farms;
    public int selectedClientId = 0;
    public int selectedCompanyId = 0;
    public bool onlyActives = true;
    public List<Client> clients = new List<Client>();
    public List<Company> companies = new List<Company>();    

    public List<Company> companiesCatalog = new List<Company>();
    public List<Services.Models.TimeZone> timeZonesCatalog = new List<Services.Models.TimeZone>();

    PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };

    private async Task ChangeClientIdForSearch(int selectedClientId)
    {
        try
        {

            this.selectedClientId = selectedClientId;
            var getAllCompaniesResult = await _companyService.GetAll(new GetAllCompaniesRequest() { ClientId = selectedClientId, IncludeInactives = false });
            companies = getAllCompaniesResult.Companies.ToList();
            if (this.selectedClientId == 0) companies.Clear();
            this.selectedCompanyId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    public async Task GetFarmsClick()
    {
        farms = null;
        List<FarmModel> farmsList = new List<FarmModel>();
        try
        {
            editableId = 0;
            var getAllFarmsResult = await _farmService.GetAll(new GetAllFarmsRequest() { ClientId = selectedClientId, CompanyId = selectedCompanyId, IncludeInactives = !onlyActives });

            if (getAllFarmsResult.Farms != null)
            {
                getAllFarmsResult.Farms.ToList().ForEach(f => farmsList.Add(new FarmModel()
                    {
                        Id = f.Id,
                        CompanyId = f.CompanyId,
                        Company = companiesCatalog.Where(c => c.Id == f.CompanyId).FirstOrDefault().Name,
                        Name = f.Name,
                        Description = f.Description,
                        TimeZoneId = f.TimeZoneId,
                        TimeZoneName = timeZonesCatalog.Where(t => t.Id == f.TimeZoneId).FirstOrDefault().Name,
                        Active = f.Active
                    }));
                farms = farmsList.AsQueryable();
            }
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
            farms = farmsList.AsQueryable();
        }
    }

    #endregion

    #region New farm

    public EditContext? editContext;
    public FarmModel newFarm = new FarmModel();
    public bool createNew = false;
    public int newClientId = 0;
    public int newCompanyId = 0;
    bool valid = true;
    public List<Company> companiesForNew = new List<Company>();
    private AlertMessage? alertCreateMessage { get; set; }

    private async Task ChangeClientIdForNew(int selectedClientId)
    {
        try
        {
            this.newClientId = selectedClientId;
            var getAllCompaniesResult = await _companyService.GetAll(new GetAllCompaniesRequest() { ClientId = selectedClientId, IncludeInactives = false });
            companiesForNew = getAllCompaniesResult.Companies.ToList();
            if (this.newClientId == 0) companiesForNew.Clear();
            this.newCompanyId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    public async Task NewFarmClick()
    {
        createNew = true;
        valid = true;
        ClearNewModel();
    }

    public async Task CancelAddFarmClick()
    {
        createNew = false;
        valid = true;
    }

    public async Task AddFarmClick()
    {
        try
        {
            valid = editContext.Validate();
            if (valid)
            {
                var createFarmResult = await _farmService.Create(new CreateFarmRequest()
                    {
                        CompanyId = newFarm.CompanyId,
                        Name = newFarm.Name,
                        Description = newFarm.Description,
                        TimeZoneId = newFarm.TimeZoneId
                    });

                if (createFarmResult != null)
                {
                    alertCreateMessage.Open();
                    await GetFarmsClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                CancelAddFarmClick();
            }
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
        }
    }

    private void ClearNewModel()
    {
        newClientId = 0;
        newFarm.CompanyId = 0;
        newFarm.Name = string.Empty;
        newFarm.Description = string.Empty;
        newFarm.TimeZoneId = 0;
    }

    #endregion

    #region Edit Farm

    public bool validEdit = true;
    public int editableId = 0;
    private AlertMessage? alertUpdateMessage { get; set; }

    void EditClick(int id) => editableId = id;

    void CancelEditClick() {
        editableId = 0;
        validEdit = true;
        validateStyleName = "";
    }

    private string validateStyleName = "";

    private async Task SaveClick(FarmModel farmToSave)
    {
        try
        {
            
            ICollection<ValidationResult> results = null;

            if (ModelValidator.Validate(farmToSave, out results))
            {
                farms = null;
                var updateFarmResult = await _farmService.Update(new UpdateFarmRequest()
                {
                    Id = farmToSave.Id,                    
                    Name = farmToSave.Name,
                    Description = farmToSave.Description,
                    Active = farmToSave.Active,
                    TimeZoneId = farmToSave.TimeZoneId
                });
                if (updateFarmResult != null)
                {
                    alertUpdateMessage.Open();
                    await GetFarmsClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                editableId = 0;
            }
            else
            {
                foreach (ValidationResult result in results)
                {                    
                    if (result.MemberNames.Contains("Name")) validateStyleName = "border: 1px solid red;";
                    validEdit = false;
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

}
