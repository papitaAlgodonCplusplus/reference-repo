@page "/CropProductionIrrigationSectors"

@using Agrismart.Agronomic.UI.Services.Models;
@using Agrismart.Agronomic.UI.Pages.Components
@using Agrismart.Agronomic.UI.Pages.InputValidators
@using Agrismart.Agronomic.UI.Services.Interfaces
@using Agrismart.Agronomic.UI.Services.Requests
@using Agrismart.Agronomic.UI.Services.Requests.Commands
@using Agrismart.Agronomic.UI.Services.Requests.Queries
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.ComponentModel.DataAnnotations

@attribute [Authorize]

@inject ICompanyService _companyService
@inject IFarmService _farmService
@inject IProductionUnitService _productionUnitService
@inject ICropProductionService _cropProductionService
@inject ICropProductionIrrigationSectorService _cropProductionIrrigationSectorService
@inject ICropService _cropService
@inject IContainerService _containerService
@inject IGrowingMediumService _growingMediumService

<PageTitle>Secciones de Riego de Cultivo</PageTitle>

<h2>Lista de Secciones de Riego de Cultivo</h2>
<hr />

<AlertMessage Title="Mensaje de sistema" @ref="@alertCreateMessage">
    <div class="alert alert-success">
        <p>Sección de Riego de Cultivo creada con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Mensaje de sistema" @ref="@alertUpdateMessage">
    <div class="alert alert-success">
        <p>Sección de Riego de Cultivo actualizada con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Error de sistema" @ref="@alertErrorMessage">
    <div class="alert alert-danger">
        <p><label>Hubo un error en la aplicación. Informe al administrador</label></p>
    </div>
</AlertMessage>

@if (!createNew)
{
    <div class="container-fluid">
        <div class="row align-items-end">
            <div class="col-2">
                <label>Compañía:</label>
                <InputSelect id="companiesList" ValueChanged="@((int value)=>ChangeCompanyIdForSearch(value))" ValueExpression="@(()=>selectedCompanyId)" Value="selectedCompanyId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todas</option>
                    @foreach (var company in companies)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label>Finca:</label>
                <InputSelect id="farmsList" ValueChanged="@((int value)=>ChangeFarmIdForSearch(value))" ValueExpression="@(()=>selectedFarmId)" Value="selectedFarmId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todas</option>
                    @foreach (var farm in farms)
                    {
                        <option value="@farm.Id">@farm.Name</option>
                    }
                </InputSelect>
            </div>   
            <div class="col-2">
                <label>Unidad de producción:</label>
                <InputSelect id="productionUnitsList" ValueChanged="@((int value)=>ChangeProductionUnitIdForSearch(value))" ValueExpression="@(()=>selectedProductionUnitId)" Value="selectedProductionUnitId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todas</option>
                    @foreach (var productionUnit in productionUnits)
                    {
                        <option value="@productionUnit.Id">@productionUnit.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label>Producción de cultivo:</label>
                <InputSelect id="cropProductionsList" @bind-Value="@selectedCropProductionId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todas</option>
                    @foreach (var cropProduction in cropProductions)
                    {
                        <option value="@cropProduction.Id">@cropProduction.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label class="form-check-label">Solo Activas</label>
                <input type="checkbox" id="onlyActivesCheck" checked @bind-value="@onlyActives" class="form-check-input" />
            </div>
            <div class="col-1">
                <button class="btn btn-primary" @onclick="GetCropProductionIrrigationSectorsClick">Consultar</button>
            </div>
            <div class="col-1">
                <button class="btn btn-secondary" @onclick="NewCropProductionIrrigationSectorClick">Nueva</button>
            </div>
            <div class="col-2" />

        </div>
    </div>
}
else
{
    <EditForm EditContext="editContext">
    <DataAnnotationsValidator />
    <div class="container-fluid">
        <div class="row align-items-end">
            <div class="col-1">
                <label>Compañía:</label>
                <InputSelect ValueChanged="@((int value)=>ChangeCompanyIdForNew(value))" ValueExpression="@(()=>newCompanyId)" Value="newCompanyId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Seleccione una opción</option>
                    @foreach (var company in companies)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-1">
                <label>Finca:</label>
                    <InputSelect ValueChanged="@((int value)=>ChangeFarmIdForNew(value))" ValueExpression="@(()=>newFarmId)" Value="newFarmId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Seleccione una opción</option>
                    @foreach (var farm in farmsForNew)
                    {
                        <option value="@farm.Id">@farm.Name</option>
                    }
                </InputSelect>
            </div>            
            <div class="col-1">
                <label>Unidad de producción:</label>
                 <InputSelect ValueChanged="@((int value)=>ChangeProductionUnitIdForNew(value))" ValueExpression="@(()=>newProductionUnitId)" Value="newProductionUnitId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Seleccione una opción</option>
                    @foreach (var productionUnit in productionUnitsForNew)
                    {
                        <option value="@productionUnit.Id">@productionUnit.Name</option>
                    }
                </InputSelect>
            </div>
                <div class="col-1">
                    <label>Producciones de cultivo:</label>
                    <InputSelect id="cropProductionsList" @bind-Value="@newCropProductionIrrigationSector.CropProductionId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var cropProduction in cropProductionsForNew)
                        {
                            <option value="@cropProduction.Id">@cropProduction.Name</option>
                        }
                    </InputSelect>
                </div>
            <div class="col-2">
                <label>Nombre:</label>
                    <InputText @bind-Value="@newCropProductionIrrigationSector.Name" style="width: 100%" type="text" class="form-control form-control-sm" />
            </div>
            <div class="col-2">
                <button class="btn btn-primary" @onclick="AddCropProductionIrrigationSectorClick">Agregar</button>
                <button class="btn btn-danger" @onclick="CancelAddCropProductionIrrigationSectorClick">Cancelar</button>
            </div>
        </div>
        @if (!valid)
        {
            <div class="row p-3">
                <div class="alert alert-warning col-8" role="alert">
                    Debe seleccionar o digitar algun valor para los atributos marcados en rojo
                </div>
            </div>
        }
    </div>
    </EditForm>
}
<hr />

@if (cropProductionIrrigationSectors == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else
{
    <QuickGrid Items="@cropProductionIrrigationSectors" Pagination="@pagination">
        <TemplateColumn Title="Id" Class="tinyColumn">
            <label>@context.Id</label>
        </TemplateColumn>
        <TemplateColumn Title="Nombre" Class="bigColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Name" style="width: 100%" />
            }
            else
            {
                <label>@context.Name</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Activa" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input type="checkbox" @bind="@context.Active" />
            }
            else
            {
                @if (context.Active)
                {
                    <i class="bi bi-toggle-on" />
                }
                else
                {
                    <i class="bi bi-toggle-off" />

                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Acciones" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <button @onclick="@(() => SaveClick(@context))"><i class="bi bi-floppy-fill"></i></button>
                <button @onclick="@(() => CancelEditClick())"><i class="bi bi-x-circle-fill"></i></button>
            }
            else
            {
                <button @onclick="@(() => EditClick(@context.Id))"><i class="bi bi-pencil-square"></i></button>
            }
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@pagination" />
}

@code {

    #region Main

    public class CropProductionIrrigationSectorModel
    {
        public int Id { get; set; }
        [Range(1, int.MaxValue, ErrorMessage = "Debe seleccionar una opción")]
        public int CropProductionId { get; set; }
        [Required]
        public string? Name { get; set; }
        public string? Polygon { get; set; }
        public bool Active { get; set; }
    }

    private AlertMessage? alertErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            editContext = new EditContext(newCropProductionIrrigationSector);

            var getAllCompaniesResult = await _companyService.GetAll(new GetAllCompaniesRequest() { IncludeInactives = false });
            companies = getAllCompaniesResult.Companies.ToList();

            await GetCropProductionIrrigationSectorsClick();
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region Search of CropProductions

    private IQueryable<CropProductionIrrigationSectorModel>? cropProductionIrrigationSectors;
    public int selectedCompanyId = 0;
    public int selectedFarmId = 0;
    public int selectedProductionUnitId = 0;
    public int selectedCropProductionId = 0;
    public bool onlyActives = true;
    public List<Company> companies = new List<Company>();
    public List<Farm> farms = new List<Farm>();
    public List<ProductionUnit> productionUnits = new List<ProductionUnit>();
    public List<CropProduction> cropProductions = new List<CropProduction>();
    PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };

    private async Task ChangeCompanyIdForSearch(int selectedCompanyId)
    {
        try
        {
            this.selectedCompanyId = selectedCompanyId;
            var getAllFarmsResult = await _farmService.GetAll(new GetAllFarmsRequest() { CompanyId = selectedCompanyId, IncludeInactives = false });
            farms = getAllFarmsResult?.Farms.ToList();
            if (this.selectedCompanyId == 0) farms.Clear();
            this.selectedFarmId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    private async Task ChangeFarmIdForSearch(int selectedFarmId)
    {
        try
        {
            this.selectedFarmId = selectedFarmId;
            var getAllProductionUnitsResult = await _productionUnitService.GetAll(new GetAllProductionUnitsRequest() { FarmId = selectedFarmId, IncludeInactives = false });
            productionUnits = getAllProductionUnitsResult.ProductionUnits.ToList();
            if (this.selectedFarmId == 0) productionUnits.Clear();
            this.selectedProductionUnitId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    private async Task ChangeProductionUnitIdForSearch(int selectedProductionUnitId)
    {
        try
        {
            this.selectedProductionUnitId = selectedProductionUnitId;
            var getAllCropProductionsResult = await _cropProductionService.GetAll(new GetAllCropProductionsRequest() { ProductionUnitId = selectedProductionUnitId, IncludeInactives = false });
            cropProductions = getAllCropProductionsResult.CropProductions.ToList();
            if (this.selectedFarmId == 0) productionUnits.Clear();
            this.selectedProductionUnitId = 0;
        }
        catch (Exception ex)
        {
        }
    }


    public async Task GetCropProductionIrrigationSectorsClick()
    {
        cropProductionIrrigationSectors = null;
        List<CropProductionIrrigationSectorModel> cropProductionIrrigationSectorsList = new List<CropProductionIrrigationSectorModel>();
        try
        {
            var getAllCropProductionIrrigationSectorsResult = await _cropProductionIrrigationSectorService.GetAll(new GetAllCropProductionIrrigationSectorsRequest() { CompanyId = selectedCompanyId, FarmId = selectedFarmId, ProductionUnitId = selectedProductionUnitId, CropProductionId = selectedCropProductionId, IncludeInactives = !onlyActives });

            getAllCropProductionIrrigationSectorsResult.CropProductionIrrigationSectors.ToList().ForEach(record => cropProductionIrrigationSectorsList.Add(new CropProductionIrrigationSectorModel()
                {
                    Id = record.Id,
                    CropProductionId = record.CropProductionId,
                    Name = record.Name,
                    Polygon = record.Polygon,
                    Active = record.Active
                }));

            cropProductionIrrigationSectors = cropProductionIrrigationSectorsList.AsQueryable();
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
            cropProductionIrrigationSectors = cropProductionIrrigationSectorsList.AsQueryable();
        }
    }

    #endregion

    #region New CropProductionIrrigationSector

    public EditContext? editContext;
    public CropProductionIrrigationSectorModel newCropProductionIrrigationSector = new CropProductionIrrigationSectorModel();
    public List<Farm> farmsForNew = new List<Farm>();
    public List<ProductionUnit> productionUnitsForNew = new List<ProductionUnit>();
    public List<CropProduction> cropProductionsForNew = new List<CropProduction
    public bool createNew = false;
    public int newCompanyId = 0;
    public int newFarmId = 0;
    public int newProductionUnitId = 0;
    bool valid = true;
    private AlertMessage alertCreateMessage { get; set; }


    private async Task ChangeCompanyIdForNew(int selectedCompanyId)
    {
        try
        {
            newCompanyId = selectedCompanyId;
            var getAllFarmResult = await _farmService.GetAll(new GetAllFarmsRequest() { CompanyId = selectedCompanyId, IncludeInactives = false });
            farmsForNew = getAllFarmResult.Farms.ToList();
            if (newCompanyId == 0) farmsForNew.Clear();
        }
        catch (Exception ex)
        {
        }
    }

    private async Task ChangeFarmIdForNew(int selectedFarmId)
    {
        try
        {
            newFarmId = selectedFarmId;
            var getAllProductionUnitsResult = await _productionUnitService.GetAll(new GetAllProductionUnitsRequest() { FarmId = selectedFarmId, IncludeInactives = false });
            productionUnitsForNew = getAllProductionUnitsResult.ProductionUnits.ToList();
            if (newFarmId == 0) productionUnitsForNew.Clear();
        }
        catch (Exception ex)
        {
        }
    }

    private async Task ChangeProductionUnitIdForNew(int selectedProductionUnitId)
    {
        try
        {
            newProductionUnitId = selectedProductionUnitId;
            var getAllCropProductionsResult = await _cropProductionService.GetAll(new GetAllCropProductionsRequest() { ProductionUnitId = selectedProductionUnitId, IncludeInactives = false });
            cropProductionsForNew = getAllCropProductionsResult.CropProductions.ToList();
            if (newProductionUnitId == 0) cropProductionsForNew.Clear();
        }
        catch (Exception ex)
        {
        }
    }

    public async Task NewCropProductionIrrigationSectorClick()
    {
        createNew = true;
        valid = true;
        ClearNewModel();
    }

    public async Task CancelAddCropProductionIrrigationSectorClick()
    {
        createNew = false;
        valid = true;
    }

    public async Task AddCropProductionIrrigationSectorClick()
    {
        try
        {
            valid = editContext.Validate();
            if (valid)
            {
                var createCropProductionIrrigationSectorResult = await _cropProductionIrrigationSectorService.Create(new CreateCropProductionIrrigationSectorRequest()
                    {
                        CropProductionId = newCropProductionIrrigationSector.CropProductionId,
                        Name = newCropProductionIrrigationSector.Name,
                        Polygon = newCropProductionIrrigationSector.Polygon
                    });
                if (createCropProductionIrrigationSectorResult != null)
                {
                    alertCreateMessage.Open();
                    await GetCropProductionIrrigationSectorsClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                CancelAddCropProductionIrrigationSectorClick();
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void ClearNewModel()
    {
        newCompanyId = 0;
        newFarmId = 0;
        newProductionUnitId = 0;
        newCropProductionIrrigationSector.CropProductionId = 0;
        newCropProductionIrrigationSector.Name = string.Empty;
        newCropProductionIrrigationSector.Polygon = null;
    }

    #endregion

    #region Edit CropProductionIrrigationSector

    public int editableId = 0;
    private AlertMessage alertUpdateMessage { get; set; }

    void EditClick(int id) => editableId = id;

    void CancelEditClick() => editableId = 0;
    
    private async Task SaveClick(CropProductionIrrigationSectorModel cropProductionIrrigationSectorToSave)
    {
        try
        {
            cropProductionIrrigationSectors = null;
            var updateCropProductionIrrigationSectorResult = await _cropProductionIrrigationSectorService.Update(new UpdateCropProductionIrrigationSectorRequest()
                {
                    Id = cropProductionIrrigationSectorToSave.Id,
                    CropProductionId = cropProductionIrrigationSectorToSave.CropProductionId,
                    Name = cropProductionIrrigationSectorToSave.Name,
                    Polygon = cropProductionIrrigationSectorToSave.Polygon,
                        Active = cropProductionIrrigationSectorToSave.Active
                });
            if (updateCropProductionIrrigationSectorResult != null)
            {
                alertUpdateMessage.Open();
                await GetCropProductionIrrigationSectorsClick();
            }
            else
            {
                alertErrorMessage.Open();
            }
            editableId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

}