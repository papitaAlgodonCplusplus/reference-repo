@page "/Devices"

@using Agrismart.Agronomic.UI.Services.Models
@using Agrismart.Agronomic.UI.Pages.Components
@using Agrismart.Agronomic.UI.Pages.InputValidators
@using Agrismart.Agronomic.UI.Services.Interfaces
@using Agrismart.Agronomic.UI.Services.Requests
@using Agrismart.Agronomic.UI.Services.Requests.Commands
@using Agrismart.Agronomic.UI.Services.Requests.Queries
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

@inject ICompanyService _companyService
@inject IDeviceService _deviceService
@inject IFarmService _farmService
@inject IProductionUnitService _productionUnitService
@inject ICropProductionService _cropProductionService

<PageTitle>Dispositivos</PageTitle>

<h2>Lista de Dispositivos</h2>
<hr />

<AlertMessage Title="Mensaje de sistema" @ref="@alertCreateMessage">
    <div class="alert alert-success">
        <p>Dispositivo creado con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Mensaje de sistema" @ref="@alertUpdateMessage">
    <div class="alert alert-success">
        <p>Dispositivo actualizado con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Error de sistema" @ref="@alertErrorMessage">
    <div class="alert alert-danger">
        <p><label>Hubo un error en la aplicación. Informe al administrador</label></p>
    </div>
</AlertMessage>

@if (!createNew)
{
    <div class="container-fluid">
        <div class="row align-items-end">
            <div class="col-2">
                <label>Compañía:</label>
                <InputSelect id="companiesList" @bind-Value="@selectedCompanyId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todas</option>
                    @foreach (var company in companies)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label class="form-check-label">Solo Activos</label>
                <input type="checkbox" id="onlyActivesCheck" checked @bind-value="@onlyActives" class="form-check-input" />
            </div>
            <div class="col-2">
                <button class="btn btn-primary" @onclick="GetDevicesClick">Consultar</button>
            </div>
            <div class="col-2">
                <button class="btn btn-secondary" @onclick="NewDeviceClick">Nuevo</button>
            </div>
            <div class="col-2" />

        </div>
    </div>
}
else
{
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <div class="container-fluid">
            <div class="row align-items-end">
                <div class="col-1">
                    <label>Compañía:</label>
                    <InputSelect @bind-Value="@newDevice.CompanyId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var company in companies)
                        {
                            <option value="@company.Id">@company.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-1">
                    <label>Identificador:</label>
                    <InputText @bind-Value="@newDevice.DeviceId" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-2">
                    <button class="btn btn-primary" @onclick="AddDeviceClick">Agregar</button>
                    <button class="btn btn-danger" @onclick="CancelAddDeviceClick">Cancelar</button>
                </div>
            </div>
            @if (!valid)
            {
                <div class="row p-3">
                    <div class="alert alert-warning col-8" role="alert">
                        Debe seleccionar o digitar algun valor para los atributos marcados en rojo
                    </div>
                </div>
            }
        </div>
    </EditForm>
}
<hr />

@if (devices == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else
{
    <QuickGrid Items="@devices" Pagination="@pagination">
        <TemplateColumn Title="Id" Class="tinyColumn">
            <label>@context.Id</label>
        </TemplateColumn>
        <TemplateColumn Title="Identificador" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.DeviceId" style="@validateStyleDeviceId" />
            }
            else
            {
                <label>@context.DeviceId</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Activo" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input type="checkbox" @bind="@context.Active" />
            }
            else
            {
                @if (context.Active)
                {
                    <i class="bi bi-toggle-on" />
                }
                else
                {
                    <i class="bi bi-toggle-off" />
                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Acciones" Class="bigColum">
            @if (context.Id == editableId)
            {
                <button @onclick="@(() => SaveClick(@context))"><i class="bi bi-floppy-fill"></i></button>
                <button @onclick="@(() => CancelClick())"><i class="bi bi-x-circle-fill"></i></button>
            }
            else
            {
                <button @onclick="@(() => Edit(@context.Id))"><i class="bi bi-pencil-square"></i></button>              
            }
        </TemplateColumn>
    </QuickGrid>
    @if (!validEdit)
    {
        <div class="row p-3">
            <div class="alert alert-warning col-8" role="alert">
                Debe seleccionar o digitar algun valor para los atributos marcados en rojo
            </div>
        </div>
    }
    <Paginator State="@pagination" />
}

@code {

    #region Main

    public class DeviceModel
    {
        public int Id { get; set; }
        [Required]
        public int CompanyId { get; set; }
        [Required]
        public string? DeviceId { get; set; }
        public bool Active { get; set; }
    }

    private AlertMessage? alertErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            editContext = new EditContext(newDevice);

            var getAllCompaniesResult = await _companyService.GetAll(new GetAllCompaniesRequest() { IncludeInactives = false });
            companies = getAllCompaniesResult.Companies.ToList();

            await GetDevicesClick();
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region Search of devices

    private IQueryable<DeviceModel>? devices;
    public int selectedCompanyId = 0;
    public int selectedFarmId = 0;
    public int selectedProductionUnitId = 0;
    public int selectedCropProductionId = 0;
    public bool onlyActives = true;
    public int visiblePasswordsId = 0;
    public List<Company> companies = new List<Company>();

    PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };

    public async Task GetDevicesClick()
    {
        devices = null;
        List<DeviceModel> devicesList = new List<DeviceModel>();
        try
        {
          
            var getAllDevicesResult = await _deviceService.GetAll(new GetAllDevicesRequest() { CompanyId = selectedCompanyId, IncludeInactives = !onlyActives });
            getAllDevicesResult.Devices.ToList().ForEach(d => devicesList.Add(new DeviceModel()
                {
                    Id = d.Id,
                    DeviceId = d.DeviceId,
                    Active = d.Active
                }));
            devices = devicesList.AsQueryable();
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
            devices = devicesList.AsQueryable();
        }
    }

    void ViewPasswords(int id) => visiblePasswordsId = id;
    void HidePasswords(int id) => visiblePasswordsId = 0;

    string Mask(string? password = "")
    {
        if (password != null && password != "") return new String('*', password.Length);
        else return password;
    }


    #endregion

    #region New device

    public EditContext editContext;
    public DeviceModel newDevice = new DeviceModel();
    public int newCompanyId = 0;
    public bool createNew = false;
    bool valid = true;
    private AlertMessage alertCreateMessage { get; set; }


    public async Task NewDeviceClick()
    {
        createNew = true;
        valid = true;
        ClearNewModel();
    }

    public async Task AddDeviceClick()
    {
        try
        {
            // valid = editContext.Validate();
            // if (valid)
            {
                devices = null;
                var createDeviceResult = await _deviceService.Create(new CreateDeviceRequest()
                    {
                        CompanyId = newDevice.CompanyId,
                        DeviceId = newDevice.DeviceId
                    });

                if (createDeviceResult != null)
                {
                    alertCreateMessage.Open();
                    await GetDevicesClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                CancelAddDeviceClick();
            }
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
        }        
    }

    public async Task CancelAddDeviceClick()
    {
        createNew = false;
        valid = true;
    }


    private void ClearNewModel()
    {
        newDevice.CompanyId = 0;
        newDevice.DeviceId = string.Empty;
    }

    #endregion

    #region Edit Device

    public bool validEdit = true;
    public int editableId = 0;
    private AlertMessage alertUpdateMessage { get; set; }

    void Edit(int id) => editableId = id;

    void CancelClick() { 
        editableId = 0;
        validEdit = true;
        validateStyleDeviceId = "";
        validateStylePassword = "";
    }
    private string validateStyleDeviceId = "";
    private string validateStylePassword = "";

    private async Task SaveClick(DeviceModel deviceToSave)
    {
        try
        {
            devices = null;
            ICollection<ValidationResult> results = null;

            if (ModelValidator.Validate(deviceToSave, out results))            
            {
                var updateDeviceResult = await _deviceService.Update(new UpdateDeviceRequest()
                    {
                        Id = deviceToSave.Id,
                        CompanyId = deviceToSave.CompanyId,
                        DeviceId = deviceToSave.DeviceId,
                        Active = deviceToSave.Active
                    });
                if (updateDeviceResult != null)
                {
                    alertUpdateMessage.Open();
                    await GetDevicesClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                editableId = 0;
            }
            else
            {
                foreach (ValidationResult result in results)
                {
                    if (result.MemberNames.Contains("DeviceId")) validateStyleDeviceId = "border: 1px solid red;";
                    if (result.MemberNames.Contains("Password")) validateStylePassword = "border: 1px solid red;";
                    validEdit = false;
                }
            }            
        }
        catch (Exception ex)
        {
        }
    }   

    #endregion
}