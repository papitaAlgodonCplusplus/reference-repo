@page "/RelayModules"

@using Agrismart.Agronomic.UI.Services.Models
@using Agrismart.Agronomic.UI.Pages.Components
@using Agrismart.Agronomic.UI.Services.Interfaces
@using Agrismart.Agronomic.UI.Services.Requests
@using Agrismart.Agronomic.UI.Services.Requests.Commands
@using Agrismart.Agronomic.UI.Services.Requests.Queries
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

@inject IRelayModuleService _relayModuleService

<PageTitle>Módulos de Releé</PageTitle>

<h2>Lista de Módulos de Releé</h2>
<hr />

<AlertMessage Title="Mensaje de sistema" @ref="@alertCreateMessage">
    <div class="alert alert-success">
        <p>Módulo de Releé creado con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Mensaje de sistema" @ref="@alertUpdateMessage">
    <div class="alert alert-success">
        <p>Módulo de Rele actualizado con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Error de sistema" @ref="@alertErrorMessage">
    <div class="alert alert-danger">
        <p><label>Hubo un error en la aplicación. Informe al administrador</label></p>
    </div>
</AlertMessage>


@if (!createNew)
{
    <div class="container-fluid">
        <div class="row align-items-end">
            <div class="col-2">
                <label class="form-check-label">Solo Activos</label>
                <input type="checkbox" id="onlyActivesCheck" checked @bind-value="@onlyActives" class="form-check-input" />
            </div>
            <div class="col-1">
                <button class="btn btn-primary" @onclick="GetRelayModulesClick">Consultar</button>
            </div>
            <div class="col-1">
                <button class="btn btn-secondary" @onclick="NewRelayModuleClick">Nuevo</button>
            </div>
            <div class="col-2" />

        </div>
    </div>
}
else
{
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <div class="container-fluid">
            <div class="row align-items-end">
                <div class="col-2">
                    <label>Nombre:</label>
                    <InputText @bind-Value="@newRelayModule.Name" style="width: 100%" type="text" class="form-control form-control-sm" />
                </div>
                <div class="col-2">
                    <button class="btn btn-primary" @onclick="AddRelayModuleClick">Agregar</button>
                    <button class="btn btn-danger" @onclick="CancelAddRelayModuleClick">Cancelar</button>
                </div>
            </div>
            @if (!valid)
            {
                <div class="row p-3">
                    <div class="alert alert-warning col-8" role="alert">
                        Debe seleccionar o digitar algun valor para los atributos marcados en rojo
                    </div>
                </div>
            }
        </div>
    </EditForm>
}
<hr />

@if (relayModules == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else
{
    <QuickGrid Items="@relayModules" Pagination="@pagination">
        <TemplateColumn Title="Id" Class="tinyColumn">
            <label>@context.Id</label>
        </TemplateColumn>
        <TemplateColumn Title="Nombre" Class="bigColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Name" style="width: 100%" />
            }
            else
            {
                <label>@context.Name</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Activo" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input type="checkbox" @bind="@context.Active" />
            }
            else
            {
                @if (context.Active)
                {
                    <i class="bi bi-toggle-on" />
                }
                else
                {
                    <i class="bi bi-toggle-off" />

                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Acciones" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <button @onclick="@(() => SaveClick(@context))"><i class="bi bi-floppy-fill"></i></button>
                <button @onclick="@(() => CancelEditClick())"><i class="bi bi-x-circle-fill"></i></button>
            }
            else
            {
                <button @onclick="@(() => EditClick(@context.Id))"><i class="bi bi-pencil-square"></i></button>
            }
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@pagination" />
}

@code {

    #region Main

    public class RelayModuleModel
    {
        public int Id { get; set; }
        [Required]
        public string? Name { get; set; }
        public bool Active { get; set; }
    }

    private AlertMessage? alertErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            editContext = new EditContext(newRelayModule);

            await GetRelayModulesClick();
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region Search of RelayModules

    private IQueryable<RelayModuleModel>? relayModules;

    public bool onlyActives = true;

    PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };

    public async Task GetRelayModulesClick()
    {
        relayModules = null;
        List<RelayModuleModel> relayModulesList = new List<RelayModuleModel>();
        try
        {
            var getAllRelayModulesResult = await _relayModuleService.GetAll(new GetAllRelayModulesRequest() { IncludeInactives = !onlyActives });

            getAllRelayModulesResult.RelayModules.ToList().ForEach(record => relayModulesList.Add(new RelayModuleModel()
                {
                    Id = record.Id,
                    Name = record.Name, 
                    Active = record.Active
                }));

            relayModules = relayModulesList.AsQueryable();
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
            relayModules = relayModulesList.AsQueryable();
        }
    }

    #endregion

    #region New RelayModule

    public EditContext? editContext;
    public RelayModuleModel newRelayModule = new RelayModuleModel();
    public bool createNew = false;
    bool valid = true;
    private AlertMessage alertCreateMessage { get; set; }

    public async Task NewRelayModuleClick()
    {
        createNew = true;
        valid = true;
        ClearNewModel();
    }

    public async Task CancelAddRelayModuleClick()
    {
        createNew = false;
        valid = true;
    }

    public async Task AddRelayModuleClick()
    {
        try
        {
            valid = editContext.Validate();
            if (valid)
            {
                var createRelayModuleResult = await _relayModuleService.Create(new CreateRelayModuleRequest()
                    {
                        Name = newRelayModule.Name
                    });
                if (createRelayModuleResult != null)
                {
                    alertCreateMessage.Open();
                    await GetRelayModulesClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                CancelAddRelayModuleClick();
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void ClearNewModel()
    {
        newRelayModule.Name = string.Empty;
    }

    #endregion

    #region Edit RelayModule

    public int editableId = 0;
    private AlertMessage alertUpdateMessage { get; set; }

    void EditClick(int id) => editableId = id;

    void CancelEditClick() => editableId = 0;

    private async Task SaveClick(RelayModuleModel RelayModuleToSave)
    {
        try
        {
            relayModules = null;
            var updateRelayModuleResult = await _relayModuleService.Update(new UpdateRelayModuleRequest()
                {
                    Id = RelayModuleToSave.Id,
                    Name = RelayModuleToSave.Name,                    
                    Active = RelayModuleToSave.Active
                });
            if (updateRelayModuleResult != null)
            {
                alertUpdateMessage.Open();
                await GetRelayModulesClick();
            }
            else
            {
                alertErrorMessage.Open();
            }
            editableId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

}