@page "/waters"

@using Agrismart.Agronomic.UI.Services.Models;
@using Agrismart.Agronomic.UI.Pages.Components
@using Agrismart.Agronomic.UI.Pages.InputValidators
@using Agrismart.Agronomic.UI.Services.Interfaces
@using Agrismart.Agronomic.UI.Services.Requests
@using Agrismart.Agronomic.UI.Services.Requests.Commands
@using Agrismart.Agronomic.UI.Services.Requests.Queries
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

@inject IWaterService _waterService
@inject ICatalogService _catalogService

<PageTitle>Aguas</PageTitle>

<h2>Lista de Aguas</h2>
<hr />

<AlertMessage Title="Mensaje de sistema" @ref="@alertCreateMessage">
    <div class="alert alert-success">
        <p>Agua creada con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Mensaje de sistema" @ref="@alertUpdateMessage">
    <div class="alert alert-success">
        <p>Agua actualizada con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Error de sistema" @ref="@alertErrorMessage">
    <div class="alert alert-danger">
        <p><label>Hubo un error en la aplicación. Informe al administrador</label></p>
    </div>
</AlertMessage>


@if (!createNew)
{
    <div class="container-fluid">
        <div class="row align-items-end">
            <div class="col-2">
                <label>Catálogo:</label>
                <InputSelect id="catalogsList" @bind-Value="@selectedCatalogId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todos</option>
                    @foreach (var catalog in catalogs)
                    {
                        <option value="@catalog.Id">@catalog.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label class="form-check-label">Solo Activas</label>
                <input type="checkbox" id="onlyActivesCheck" checked @bind-value="@onlyActives" class="form-check-input" />
            </div>
            <div class="col-2">
                <button class="btn btn-primary" @onclick="GetWatersClick">Consultar</button>
            </div>
            <div class="col-2">
                <button class="btn btn-secondary" @onclick="NewWaterClick">Nuevo</button>
            </div>
            <div class="col-2" />

        </div>
    </div>
}
else
{
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <div class="container-fluid">
            <div class="row align-items-end">
                <div class="col-1">
                    <label>Catálogo:</label>
                    <InputSelect @bind-Value="@newWater.CatalogId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var catalog in catalogs)
                        {
                            <option value="@catalog.Id">@catalog.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-1">
                    <label>Nombre:</label>
                    <InputText @bind-Value="@newWater.Name" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-2">
                    <button class="btn btn-primary" @onclick="AddWaterClick">Agregar</button>
                    <button class="btn btn-danger" @onclick="CancelAddWaterClick">Cancelar</button>
                </div>
            </div>
            @if (!valid)
            {
                <div class="row p-3">
                    <div class="alert alert-warning col-8" role="alert">
                        Debe seleccionar o digitar algun valor para los atributos marcados en rojo
                    </div>
                </div>
            }
        </div>
    </EditForm>
}
<hr />

@if (waters == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else
{
    <QuickGrid Items="@waters" Pagination="@pagination">
        <TemplateColumn Title="Id" Class="tinyColumn">
            <label>@context.Id</label>
        </TemplateColumn>
        <TemplateColumn Title="Catalogo" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <InputSelect id="catalogList" @bind-Value="@context.CatalogId" style="width: 100%">

                    @foreach (var catalog in catalogs)
                    {
                        <option value="@catalog.Id">@catalog.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label>@context.Catalog</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Nombre" Class="normalColumn" Sortable="true">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Name" />
            }
            else
            {
                <label>@context.Name</label>
            }
        </TemplateColumn>       
        <TemplateColumn Title="Activo" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input type="checkbox" @bind="@context.Active" />
            }
            else
            {
                @if (context.Active)
                {
                    <i class="bi bi-toggle-on" />
                }
                else
                {
                    <i class="bi bi-toggle-off" />
                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Acciones" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <button @onclick="@(() => SaveClick(@context))"><i class="bi bi-floppy-fill"></i></button>
                <button @onclick="@(() => CancelEditClick())"><i class="bi bi-x-circle-fill"></i></button>
            }
            else
            {
                <button @onclick="@(() => EditClick(@context.Id))"><i class="bi bi-pencil-square"></i></button>
            }
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@pagination" />
}

@code {

    #region Main

    public class WaterModel
    {
        public int Id { get; set; }
        public int CatalogId { get; set; }
        public string? Catalog { get; set; }
        public string? Name { get; set; }
        public bool Active { get; set; }
    }

    private AlertMessage? alertErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            editContext = new EditContext(newWater);

            var getAllCatalogsResult = await _catalogService.GetAll(new GetAllCatalogsRequest() { IncludeInactives = false });
            catalogs = getAllCatalogsResult.Catalogs.ToList();

            await GetWatersClick();
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region Search of Waters

    private IQueryable<WaterModel>? waters;
    public int selectedCatalogId = 0;
    public bool onlyActives = true;
    public List<Catalog> catalogs = new List<Catalog>();
    PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };

    public async Task GetWatersClick()
    {
        waters = null;
        List<WaterModel> watersList = new List<WaterModel>();
        try
        {

            var getAllWatersResult = await _waterService.GetAll(new GetAllWatersRequest() { CatalogId = selectedCatalogId, IncludeInactives = !onlyActives });

            if (getAllWatersResult.Waters != null)
            {
                getAllWatersResult.Waters.ToList().ForEach(f => watersList.Add(new WaterModel()
                    {
                        Id = f.Id,
                        CatalogId = f.CatalogId,
                        Catalog = catalogs.Where(cat => cat.Id == f.CatalogId).FirstOrDefault().Name,
                        Name = f.Name,
                        Active = f.Active
                    }));

                waters = watersList.AsQueryable();
            }
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
            waters = watersList.AsQueryable();
        }
    }

    #endregion

    #region New Water

    public EditContext? editContext;
    public WaterModel newWater = new WaterModel();
    public bool createNew = false;
    public int newCatalogId = 0;
    bool valid = true;
    private AlertMessage alertCreateMessage { get; set; }

    public async Task NewWaterClick()
    {
        createNew = true;
        valid = true;
        ClearNewModel();
    }

    public async Task CancelAddWaterClick()
    {
        createNew = false;
        valid = true;
    }

    public async Task AddWaterClick()
    {
        try
        {
            valid = editContext.Validate();
            if (valid)
            {
                var createWaterResult = await _waterService.Create(new CreateWaterRequest()
                    {
                        CatalogId = newWater.CatalogId,
                        Name = newWater.Name
                    });
                if (createWaterResult != null)
                {
                    alertCreateMessage.Open();
                    await GetWatersClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                CancelAddWaterClick();
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void ClearNewModel()
    {
        newWater.CatalogId = 0;
        newWater.Name = string.Empty;
    }

    #endregion

    #region Edit Water

    public int editableId = 0;
    private AlertMessage alertUpdateMessage { get; set; }

    void EditClick(int id) => editableId = id;

    void CancelEditClick() => editableId = 0;

    private async Task SaveClick(WaterModel waterToSave)
    {
        try
        {
            waters = null;
            var updateWaterResult = await _waterService.Update(new UpdateWaterRequest()
                {
                    Id = waterToSave.Id,
                    CatalogId = waterToSave.CatalogId,
                    Name = waterToSave.Name,                  
                    Active = waterToSave.Active
                });
            if (updateWaterResult != null)
            {
                alertUpdateMessage.Open();
                await GetWatersClick();
            }
            else
            {
                alertErrorMessage.Open();
            }
            editableId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    #endregion
}
