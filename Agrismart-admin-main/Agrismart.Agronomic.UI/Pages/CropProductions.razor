@page "/CropProductions"

@using Agrismart.Agronomic.UI.Services.Models
@using Agrismart.Agronomic.UI.Pages.Components
@using Agrismart.Agronomic.UI.Pages.InputValidators
@using Agrismart.Agronomic.UI.Services.Interfaces
@using Agrismart.Agronomic.UI.Services.Requests
@using Agrismart.Agronomic.UI.Services.Requests.Commands
@using Agrismart.Agronomic.UI.Services.Requests.Queries
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.ComponentModel.DataAnnotations
@using static Agrismart.Agronomic.UI.Pages.Devices
@attribute [Authorize]

@inject IClientService _clientService
@inject ICompanyService _companyService
@inject IFarmService _farmService
@inject IProductionUnitService _productionUnitService
@inject ICropProductionService _cropProductionService
@inject ICropService _cropService
@inject IContainerService _containerService
@inject IGrowingMediumService _growingMediumService
@inject IDropperService _dropperService
@inject IDeviceService _deviceService
@inject ICropProductionDeviceService _cropProductionDeviceService


<PageTitle>Producciones de Cultivo</PageTitle>

<h2>Lista de Producciones de Cultivo</h2>
<hr />

<AlertMessage Title="Mensaje de sistema" @ref="@alertCreateMessage">
    <div class="alert alert-success">
        <p>Producción de Cultivo creada con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Mensaje de sistema" @ref="@alertUpdateMessage">
    <div class="alert alert-success">
        <p>Producción de Cultivo actualizada con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Error de sistema" @ref="@alertErrorMessage">
    <div class="alert alert-danger">
        <p><label>Hubo un error en la aplicación. Informe al administrador</label></p>
    </div>
</AlertMessage>

@if (!createNew)
{
    <div class="container-fluid">
        <div class="row align-items-end">
            <AuthorizeView Roles="1">
                <div class="col-2">
                    <label>Cliente:</label>
                    <InputSelect id="clientsList" ValueChanged="@((int value)=>ChangeClientIdForSearch(value))" ValueExpression="@(()=>selectedClientId)" Value="selectedClientId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Todos</option>
                        @foreach (var client in clients)
                        {
                            <option value="@client.Id">@client.Name</option>
                        }
                    </InputSelect>
                </div>
            </AuthorizeView>
            <div class="col-2">
                <label>Compañía:</label>
                <InputSelect id="companiesList" ValueChanged="@((int value)=>ChangeCompanyIdForSearch(value))" ValueExpression="@(()=>selectedCompanyId)" Value="selectedCompanyId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todas</option>
                    @foreach (var company in companies)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label>Finca:</label>
                <InputSelect id="farmsList" ValueChanged="@((int value)=>ChangeFarmIdForSearch(value))" ValueExpression="@(()=>selectedFarmId)" Value="selectedFarmId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todas</option>
                    @foreach (var farm in farms)
                    {
                        <option value="@farm.Id">@farm.Name</option>
                    }
                </InputSelect>
            </div>   
            <div class="col-2">
                <label>Unidad de producción:</label>
                <InputSelect id="cropProductionsList" @bind-Value="@selectedProductionUnitId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todas</option>
                    @foreach (var productionUnit in productionUnits)
                    {
                        <option value="@productionUnit.Id">@productionUnit.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label class="form-check-label">Solo Activas</label>
                <input type="checkbox" id="onlyActivesCheck" checked @bind-value="@onlyActives" class="form-check-input" />
            </div>
            <div class="col-2">
                <button class="btn btn-primary" @onclick="GetCropProductionsClick">Consultar</button>
            </div>
            <div class="col-2">
                <button class="btn btn-secondary" @onclick="NewCropProductionClick">Nueva</button>
            </div>
            <div class="col-2" />

        </div>
    </div>
}
else
{
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <div class="container-fluid">
            <div class="row align-items-end">
                <div class="col-2">
                    <label>Cliente:</label>
                    <InputSelect ValueChanged="@((int value)=>ChangeClientIdForNew2(value))" ValueExpression="@(()=>newClientId)" Value="@newClientId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var client in clients)
                        {
                            <option value="@client.Id">@client.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-2">
                    <label>Compañía:</label>
                    <InputSelect ValueChanged="@((int value)=>ChangeCompanyIdForNew(value))" ValueExpression="@(()=>newCompanyId)" Value="@newCompanyId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var company in companiesForNew)
                        {
                            <option value="@company.Id">@company.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-2">
                    <label>Finca:</label>
                    <InputSelect ValueChanged="@((int value)=>ChangeFarmIdForNew(value))" ValueExpression="@(()=>newFarmId)" Value="@newFarmId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var farm in farmsForNew)
                        {
                            <option value="@farm.Id">@farm.Name</option>
                        }
                    </InputSelect>
                </div>            
                <div class="col-1">
                    <label>Unidad de producción:</label>
                    <InputSelect id="cropProductionsList" @bind-Value="@newCropProduction.ProductionUnitId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var productionUnit in productionUnitsForNew)
                        {
                            <option value="@productionUnit.Id">@productionUnit.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-1">
                    <label>Cultivo:</label>
                    <InputSelect id="cropsList" @bind-Value="@newCropProduction.CropId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var crop in crops)
                        {
                            <option value="@crop.Id">@crop.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-1">
                    <label>Nombre:</label>
                    <InputText @bind-Value="@newCropProduction.Name" style="width: 100%" type="text" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Contenedor:</label>
                    <InputSelect id="containersList" @bind-Value="@newCropProduction.ContainerId" style="width: 100%" class="form-select form-control-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var container in containersForNew)
                        {
                            <option value="@container.Id">@container.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-1">
                    <label>Medio de Crecimiento:</label>
                    <InputSelect id="growingMediumList" @bind-Value="@newCropProduction.GrowingMediumId" style="width: 100%" class="form-select form-control-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var growingMedium in growingMediumsForNew)
                        {
                            <option value="@growingMedium.Id">@growingMedium.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-1">
                    <label>Gotero:</label>
                    <InputSelect id="droppersList" @bind-Value="@newCropProduction.DropperId" style="width: 100%" class="form-select form-control-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var dropper in droppersForNew)
                        {
                            <option value="@dropper.Id">@dropper.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="row align-items-end">
                <div class="col-1">
                    <label>Ancho:</label>
                    <InputNumber @bind-Value="@newCropProduction.Width" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Largo:</label>
                    <InputNumber @bind-Value="@newCropProduction.Length" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Distancia Filas:</label>
                    <InputNumber @bind-Value="@newCropProduction.BetweenRowDistance" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Distancia Contenedores:</label>
                    <InputNumber @bind-Value="@newCropProduction.BetweenContainerDistance" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Distancia Plantas:</label>
                    <InputNumber @bind-Value="@newCropProduction.BetweenPlantDistance" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label title="Goteros Contenedor">Cantidad Goteros Contenedor:</label>
                    <InputNumber @bind-Value="@newCropProduction.NumberOfDroppersPerContainer" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Fecha Inicio:</label>
                    <InputDate @bind-Value="@newCropProduction.StartDate" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Fecha Final:</label>
                    <InputDate @bind-Value="@newCropProduction.EndDate" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-2">
                    <button class="btn btn-primary" @onclick="AddCropProductionClick">Agregar</button>
                    <button class="btn btn-danger" @onclick="CancelAddCropProductionClick">Cancelar</button>
                </div>
            </div>
            @if (!valid)
            {
                <div class="row p-3">
                    <div class="alert alert-warning col-8" role="alert">
                        Debe seleccionar o digitar algun valor para los atributos marcados en rojo
                    </div>
                </div>
            }
        </div>
    </EditForm>
}
<hr />

@if (cropProductions == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else
{
    <QuickGrid Items="@cropProductions" Pagination="@pagination">
        <TemplateColumn Title="Id" Class="tinyColumn">
            <label>@context.Id</label>
        </TemplateColumn>
        <TemplateColumn Title="Cultivo" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <InputSelect id="cropsList" @bind-Value="@context.CropId" style="width: 100%">

                    @foreach (var crop in crops)
                    {
                        <option value="@crop.Id">@crop.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label>@context.Crop</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Nombre" Class="bigColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Name" style="width: 100%" />
            }
            else
            {
                <label>@context.Name</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Contenedor" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <InputSelect id="containersList" @bind-Value="@context.ContainerId" style="width: 100%">

                    @foreach (var container in containers)
                    {
                        <option value="@container.Id">@container.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label>@context.Container</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Medio Crecimiento" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <InputSelect id="growingMediumList" @bind-Value="@context.GrowingMediumId" style="width: 100%">

                    @foreach (var growingMedium in growingMediums)
                    {
                        <option value="@growingMedium.Id">@growingMedium.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label>@context.GrowingMedium</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Gotero" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <InputSelect id="dropperList" @bind-Value="@context.DropperId" style="width: 100%">

                    @foreach (var dropper in droppers)
                    {
                        <option value="@dropper.Id">@dropper.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label>@context.Dropper</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Ancho" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Width" style="width: 100%" />
            }
            else
            {
                <label>@context.Width</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Largo" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Length" style="width: 100%" />
            }
            else
            {
                <label>@context.Length</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Distancia Filas" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.BetweenRowDistance" style="width: 100%" />
            }
            else
            {
                <label>@context.BetweenRowDistance</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Distancia Contenedores" Class="normalColumn" >
            @if (context.Id == editableId)
            {
                <input @bind="@context.BetweenContainerDistance" style="width: 100%" />
            }
            else
            {
                <label>@context.BetweenContainerDistance</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Distancia Plantas" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.BetweenPlantDistance" style="width: 100%" />
            }
            else
            {
                <label>@context.BetweenPlantDistance</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Goteros Por Contenedor" Class="normalColumn" >
            @if (context.Id == editableId)
            {
                <input @bind="@context.NumberOfDroppersPerContainer" style="width: 100%" />
            }
            else
            {
                <label>@context.NumberOfDroppersPerContainer</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Altura Velocidad Viento" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.WindSpeedMeasurementHeight" style="width: 100%" />
            }
            else
            {
                <label>@context.WindSpeedMeasurementHeight</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Altitud" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Altitude" style="width: 100%" />
            }
            else
            {
                <label>@context.Altitude</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Latitud" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Latitude" style="width: 100%" />
            }
            else
            {
                <label>@context.Latitude</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Longitud" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.Longitude" style="width: 100%" />
            }
            else
            {
                <label>@context.Longitude</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Porcentaje Agotamiento" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.DepletionPercentage" style="width: 100%" />
            }
            else
            {
                <label>@context.DepletionPercentage</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Umbral Drenaje" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.DrainThreshold" style="width: 100%" />
            }
            else
            {
                <label>@context.DrainThreshold</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Fecha Inicio" Class="bigColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.StartDate" />
            }
            else
            {
                <label>@context.StartDate</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Fecha Final" Class="bigColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.EndDate" />
            }
            else
            {
                <label>@context.EndDate</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Activa" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input type="checkbox" @bind="@context.Active" />
            }
            else
            {
                @if (context.Active)
                {
                    <i class="bi bi-toggle-on" />
                }
                else
                {
                    <i class="bi bi-toggle-off" />

                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Acciones" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <button @onclick="@(() => SaveClick(@context))"><i class="bi bi-floppy-fill" title="Salvar"></i></button>
                <button @onclick="@(() => CancelEditClick())"><i class="bi bi-x-circle-fill" title="Cancelar"></i></button>
            }
            else
            {
                <button @onclick="@(() => EditClick(@context.Id))"><i class="bi bi-pencil-square" title="Editar"></i></button>
                <button @onclick="@(() => EditDevices(@context.Id))"><i class="bi bi-hdd-stack-fill" title="Dispositivos"></i></button>
            }
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@pagination" />
}

@if (@manageDevices)
{
    <div class="modal show" tabindex="-1" role="dialog" style="display:block; overflow-y: auto;" >
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Administrar dispositivos</h4>
                    <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="CloseEditDevices">
                    </button>
                </div>
                <div class="modal-body ">
                    <div class="row align-items-end ms-2 me-2">
                        <div class="col-5" align="center">
                            <h5>Dispositivos asignados</h5>
                        </div>
                        <div class="col-2">
                        </div>
                        <div class="col-5" align="center">
                            <h5>Dispositivos disponibles</h5>
                        </div>
                    </div>
                    <div class="row manageDevices ms-2 me-2">
                        <div class="col-5 align-top border">
                            @if (cropProductionDevices != null)
                            {
                                <QuickGrid Items="@cropProductionDevices" >   
                                    <TemplateColumn Title="" Class="hugeColumn">
                                        @if (context.Id == selectedAssignedDeviceId)
                                        {
                                            <div @onclick="@(() => UnselectAssigned())" style="width:100%;background-color:black;">
                                                <label><font color="white">@context.Name</font></label>
                                            </div>
                                        }
                                        else
                                        {
                                            <div @onclick="@(() => SelectAssigned(@context.Id))" style="width:100%">
                                                <label>@context.Name</label>
                                            </div>
                                        }
                                    </TemplateColumn>
                                </QuickGrid>
                            }
                        </div>
                        <div class="col-2" align="center">
                            @if (companyDevices == null || cropProductionDevices == null)
                            {
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Cargando...</span>
                                </div>
                            }
                        </div>
                        <div class="col-5 align-top border">
                            @if (companyDevices != null)
                            {
                                <QuickGrid Items="@companyDevices" style="width:100%">
                                    <TemplateColumn Title="" Class="hugeColumn">
                                        @if (context.Id == selectedAvailableDeviceId)
                                        {
                                            <div @onclick="@(() => UnselectAvailable())" style="width:100%;background-color:black;">
                                                <label><font color="white">@context.DeviceId</font></label>
                                            </div>
                                        }
                                        else
                                        {
                                            <div @onclick="@(() => SelectAvailable(@context.Id))" style="width:100%">
                                                <label>@context.DeviceId</label>
                                            </div>
                                        }
                                    </TemplateColumn>
                                </QuickGrid>
                            }


                        </div>
                        <div class="col-5" style="align-content:end">
                            <label>Fecha Inicio:</label>
                            <InputDate @bind-Value="@newStartDate" style="width: 100%" class="form-control form-control-sm" />
                        </div>
                    </div>
                    <div class="row align-items-end ms-2 me-2 pt-4">
                        <div class="col-5" align="center">
                            <button class="btn btn-danger" @onclick="RemoveDeviceFromCropProduction">Eliminar</button>
                        </div>
                        <div class="col-2">
                        </div>
                        <div class="col-5" align="center">
                            <button class="btn btn-primary" @onclick="AddDeviceToCropProduction">Agregar</button>
                        </div>
                    </div>
                </div>               
            </div>
        </div>
        <AlertMessage Title="Error de validacion" @ref="@validationErrorMessage1">
            <div class="alert alert-danger">
                <p><label>Debe seleccionar un dispositivo</label></p>
            </div>
        </AlertMessage>

        <AlertMessage Title="Error de validacion" @ref="@validationErrorMessage2">
            <div class="alert alert-danger">
                <p><label>Debe seleccionar un dispositivo y seleccionar una fecha de inicio valida</label></p>
            </div>
        </AlertMessage>
    </div>
}

@code {

    #region Main

    public class CropProductionModel
    {
        public int Id { get; set; }
        [Range(1, int.MaxValue, ErrorMessage = "Debe seleccionar una opción")]
        public int CropId { get; set; }
        public string? Crop { get; set; }
        [Range(1, int.MaxValue, ErrorMessage = "Debe seleccionar una opción")]
        public int ProductionUnitId { get; set; }
        [Required]
        public string? Name { get; set; }
        [Range(1, int.MaxValue, ErrorMessage = "Debe seleccionar una opción")]
        public int ContainerId { get; set; }
        public string? Container { get; set; }
        [Range(1, int.MaxValue, ErrorMessage = "Debe seleccionar una opción")]
        public int GrowingMediumId { get; set; }
        [Range(1, int.MaxValue, ErrorMessage = "Debe seleccionar una opción")]
        public string? GrowingMedium { get; set; }
        public int DropperId { get; set; }
        public string? Dropper { get; set; }
        public double Width { get; set; }
        public double Length { get; set; }
        public double BetweenRowDistance { get; set; }
        public double BetweenContainerDistance { get; set; }
        public double BetweenPlantDistance { get; set; }
        public int PlantsPerContainer { get; set; }
        public int NumberOfDroppersPerContainer { get; set; }
        public double WindSpeedMeasurementHeight { get; set; }
        [DataType(DataType.Date)]
        [DateMustBeAfterAttribute("2000/01/01")]
        public DateTime StartDate { get; set; } = DateTime.MinValue;
        [DataType(DataType.Date)]
        [DateMustBeAfterAttribute("2000/01/01")]
        public DateTime EndDate { get; set; } = DateTime.MinValue;
        public int Altitude { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public double DepletionPercentage { get; set; }
        public double DrainThreshold { get; set; }
        public bool Active { get; set; }
    }

    private AlertMessage? alertErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            editContext = new EditContext(newCropProduction);

            var getAllClientsResult = await _clientService.GetAll(new GetAllClientsRequest() { IncludeInactives = false });
            clients = getAllClientsResult.Clients.ToList();

            var getAllCompaniesResult = await _companyService.GetAll(new GetAllCompaniesRequest() { IncludeInactives = false });
            companies = getAllCompaniesResult.Companies.ToList();

            var getAllContainersResult = await _containerService.GetAll(new GetAllContainersRequest() { IncludeInactives = true });
            containers = getAllContainersResult.Containers.ToList();

            var getAllGrowingMediumsResult = await _growingMediumService.GetAll(new GetAllGrowingMediumsRequest() { IncludeInactives = true });
            growingMediums = getAllGrowingMediumsResult.GrowingMediums.ToList();

            var getAllDroppersResult = await _dropperService.GetAll(new GetAllDroppersRequest() { IncludeInactives = true });
            droppers = getAllDroppersResult.Droppers.ToList();

            var getAllCropsResult = await _cropService.GetAll(new GetAllCropsRequest() { IncludeInactives = true });
            crops = getAllCropsResult.Crops.ToList();

            var getAllDevicesResult = await _deviceService.GetAll(new GetAllDevicesRequest() { IncludeInactives = true });
            devices = getAllDevicesResult.Devices.ToList();

            await GetCropProductionsClick();
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region Search of CropProductions

    private IQueryable<CropProductionModel>? cropProductions;
    public int selectedClientId = 0;
    public int selectedCompanyId = 0;
    public int selectedFarmId = 0;
    public int selectedProductionUnitId = 0;
    public bool onlyActives = true;
    public List<Client> clients = new List<Client>();
    public List<Company> companies = new List<Company>();
    public List<Farm> farms = new List<Farm>();
    public List<ProductionUnit> productionUnits = new List<ProductionUnit>();
    public List<Crop> crops = new List<Crop>();
    public List<Container> containers = new List<Container>();
    public List<GrowingMedium> growingMediums = new List<GrowingMedium>();
    public List<Dropper> droppers = new List<Dropper>();
    public List<Device> devices = new List<Device>();
    PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };

    private async Task ChangeClientIdForSearch(int selectedClientId)
    {
        try
        {
            this.selectedClientId = selectedClientId;
            var getAllCompaniesResult = await _companyService.GetAll(new GetAllCompaniesRequest() { ClientId = selectedClientId, IncludeInactives = false });
            companies = getAllCompaniesResult.Companies.ToList();
            if (this.selectedClientId == 0) companies.Clear();
            this.selectedCompanyId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    private async Task ChangeCompanyIdForSearch(int selectedCompanyId)
    {
        try
        {
            this.selectedCompanyId = selectedCompanyId;
            var getAllFarmsResult = await _farmService.GetAll(new GetAllFarmsRequest() { CompanyId = selectedCompanyId, IncludeInactives = false });
            farms = getAllFarmsResult?.Farms.ToList();
            if (this.selectedCompanyId == 0) farms.Clear();
            this.selectedFarmId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    private async Task ChangeFarmIdForSearch(int selectedFarmId)
    {
        try
        {
            this.selectedFarmId = selectedFarmId;
            var getAllProductionUnitsResult = await _productionUnitService.GetAll(new GetAllProductionUnitsRequest() { FarmId = selectedFarmId, IncludeInactives = false });
            productionUnits = getAllProductionUnitsResult.ProductionUnits.ToList();
            if (this.selectedFarmId == 0) productionUnits.Clear();
            this.selectedProductionUnitId = 0;
        }
        catch (Exception ex)
        {
        }
    }


    public async Task GetCropProductionsClick()
    {
        cropProductions = null;
        List<CropProductionModel> cropProductionsList = new List<CropProductionModel>();
        try
        {
            var getAllCropProductionsResult = await _cropProductionService.GetAll(new GetAllCropProductionsRequest() { ClientId = selectedClientId, CompanyId = selectedCompanyId, FarmId = selectedFarmId, ProductionUnitId = selectedProductionUnitId, IncludeInactives = !onlyActives });

            getAllCropProductionsResult.CropProductions.ToList().ForEach(cp => cropProductionsList.Add(new CropProductionModel()
                    {
                        Id = cp.Id,
                        CropId = cp.CropId,
                        Crop = crops.Where(c => c.Id == cp.CropId).FirstOrDefault().Name,
                        ProductionUnitId = cp.ProductionUnitId,
                        Name = cp.Name,
                        ContainerId = cp.ContainerId,
                        Container = containers.Where(c => c.Id == cp.ContainerId).FirstOrDefault().Name,
                        GrowingMediumId = cp.GrowingMediumId,
                        GrowingMedium = growingMediums.Where(gm => gm.Id == cp.GrowingMediumId).FirstOrDefault().Name,
                        DropperId = cp.DropperId,
                        Dropper = droppers.Where(gm => gm.Id == cp.DropperId).FirstOrDefault().Name,
                        Width = cp.Width,
                        Length = cp.Length,
                        BetweenRowDistance = cp.BetweenRowDistance,
                        BetweenContainerDistance = cp.BetweenContainerDistance,
                        BetweenPlantDistance = cp.BetweenPlantDistance,
                        PlantsPerContainer = cp.PlantsPerContainer,
                        NumberOfDroppersPerContainer = cp.NumberOfDroppersPerContainer,
                        WindSpeedMeasurementHeight = cp.WindSpeedMeasurementHeight,
                        StartDate = cp.StartDate,
                        EndDate = cp.EndDate,
                        Altitude = cp.Altitude,
                        Latitude = cp.Latitude,
                        Longitude = cp.Longitude,
                        DepletionPercentage = cp.DepletionPercentage,
                        DrainThreshold = cp.DrainThreshold,
                        Active = cp.Active
                    }));

            cropProductions = cropProductionsList.AsQueryable();
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
            cropProductions = cropProductionsList.AsQueryable();
        }
    }

    #endregion

    #region New CropProduction

    public EditContext? editContext;
    public CropProductionModel newCropProduction = new CropProductionModel();
    public List<Company> companiesForNew = new List<Company>();
    public List<Farm> farmsForNew = new List<Farm>();
    public List<ProductionUnit> productionUnitsForNew = new List<ProductionUnit>();
    public List<Container> containersForNew = new List<Container>();
    public List<GrowingMedium> growingMediumsForNew = new List<GrowingMedium>();
    public List<Dropper> droppersForNew = new List<Dropper>();
    public bool createNew = false;
    public int newClientId = 0;
    public int newCompanyId = 0;
    public int newCatalogId = 0;
    public int newFarmId = 0;
    bool valid = true;
    private AlertMessage alertCreateMessage { get; set; }

    private async Task ChangeClientIdForNew2(int selectedClientId)
    {
        try
        {
            this.newClientId = selectedClientId;
            var getAllCompaniesResult = await _companyService.GetAll(new GetAllCompaniesRequest() { ClientId = selectedClientId, IncludeInactives = false });
            companiesForNew = getAllCompaniesResult.Companies.ToList();
            if (this.newClientId == 0) companiesForNew.Clear();
            this.newCompanyId = 0;
        }
        catch (Exception ex)
        {
        }
    }
    private async Task ChangeCompanyIdForNew(int selectedCompanyId)
    {
        try
        {
            newCompanyId = selectedCompanyId;

            var getCompanyResult = await _companyService.GetById(new GetCompanyByIdRequest() { Id = selectedCompanyId });
            newCatalogId = getCompanyResult.CatalogId;

            var getAllFarmResult = await _farmService.GetAll(new GetAllFarmsRequest() { CompanyId = selectedCompanyId, IncludeInactives = false });
            farmsForNew = getAllFarmResult.Farms.ToList();

            var getAllContainersResult = await _containerService.GetAll(new GetAllContainersRequest() { CatalogId = newCatalogId, IncludeInactives = true });
            containersForNew = getAllContainersResult.Containers.ToList();

            var getAllGrowingMediumsResult = await _growingMediumService.GetAll(new GetAllGrowingMediumsRequest() { CatalogId = newCatalogId, IncludeInactives = true });
            growingMediumsForNew = getAllGrowingMediumsResult.GrowingMediums.ToList();

            var getAllDroppersResult = await _dropperService.GetAll(new GetAllDroppersRequest() { CatalogId = newCatalogId, IncludeInactives = true });
            droppersForNew = getAllDroppersResult.Droppers.ToList();

            if (newCompanyId == 0) farmsForNew.Clear();
        }
        catch (Exception ex)
        {
        }
    }

    private async Task ChangeFarmIdForNew(int selectedFarmId)
    {
        try
        {
            newFarmId = selectedFarmId;
            var getAllProductionUnitsByFarmResult = await _productionUnitService.GetAll(new GetAllProductionUnitsRequest() { FarmId = selectedFarmId, IncludeInactives = false });
            productionUnitsForNew = getAllProductionUnitsByFarmResult.ProductionUnits.ToList();
            if (newFarmId == 0) productionUnitsForNew.Clear();
        }
        catch (Exception ex)
        {
        }
    }

    public async Task NewCropProductionClick()
    {
        createNew = true;
        valid = true;
        ClearNewModel();
    }

    public async Task CancelAddCropProductionClick()
    {
        createNew = false;
        valid = true;
    }

    public async Task AddCropProductionClick()
    {
        try
        {
            valid = editContext.Validate();
            if (valid)
            {
                var createCropProductionResult = await _cropProductionService.Create(new CreateCropProductionRequest()
                    {
                        CropId = newCropProduction.CropId,
                        Name = newCropProduction.Name,
                        ProductionUnitId = newCropProduction.ProductionUnitId,
                        ContainerId = newCropProduction.ContainerId,
                        GrowingMediumId = newCropProduction.GrowingMediumId,
                        DropperId = newCropProduction.DropperId,
                        Length = newCropProduction.Length,
                        Width = newCropProduction.Width,
                        BetweenContainerDistance = newCropProduction.BetweenContainerDistance,
                        BetweenRowDistance = newCropProduction.BetweenRowDistance,
                        BetweenPlantDistance = newCropProduction.BetweenPlantDistance,
                        PlantsPerContainer = newCropProduction.PlantsPerContainer,
                        NumberOfDroppersPerContainer = newCropProduction.NumberOfDroppersPerContainer,
                        WindSpeedMeasurementHeight = newCropProduction.WindSpeedMeasurementHeight,
                        Altitude = newCropProduction.Altitude,
                        Latitude = newCropProduction.Latitude,
                        Longitude = newCropProduction.Longitude,
                        DepletionPercentage = newCropProduction.DepletionPercentage,
                        DrainThreshold = newCropProduction.DrainThreshold,
                        StartDate = newCropProduction.StartDate,
                        EndDate = newCropProduction.EndDate
                    });
                if (createCropProductionResult != null)
                {
                    alertCreateMessage.Open();
                    await GetCropProductionsClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                CancelAddCropProductionClick();
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void ClearNewModel()
    {
        newClientId = 0;
        newCompanyId = 0;
        newFarmId = 0;
        newCropProduction.CropId = 0;
        newCropProduction.Name = string.Empty;
        newCropProduction.ProductionUnitId = 0;
        newCropProduction.ContainerId = 0;
        newCropProduction.GrowingMediumId = 0;
        newCropProduction.DropperId = 0;
        newCropProduction.Length = 0;
        newCropProduction.Width = 0;
        newCropProduction.BetweenContainerDistance = 0;
        newCropProduction.BetweenRowDistance = 0;
        newCropProduction.BetweenPlantDistance = 0;
        newCropProduction.PlantsPerContainer = 0;
        newCropProduction.NumberOfDroppersPerContainer = 0;
        newCropProduction.WindSpeedMeasurementHeight = 0;
        newCropProduction.StartDate = DateTime.MinValue;
        newCropProduction.EndDate = DateTime.MinValue;
        newCropProduction.Altitude = 0;
        newCropProduction.Latitude = 0;
        newCropProduction.Longitude = 0;
        newCropProduction.DepletionPercentage = 0;
        newCropProduction.DrainThreshold = 0;
    }

    #endregion

    #region Edit CropProduction

    public int editableId = 0;
    private AlertMessage alertUpdateMessage { get; set; }

    void EditClick(int id) => editableId = id;

    void CancelEditClick() => editableId = 0;

    private async Task SaveClick(CropProductionModel cropProductionToSave)
    {
        try
        {
            cropProductions = null;
            var updateCropProductionResult = await _cropProductionService.Update(new UpdateCropProductionRequest()
                {
                    Id = cropProductionToSave.Id,
                    CropId = cropProductionToSave.CropId,
                    Name = cropProductionToSave.Name,
                    ProductionUnitId = cropProductionToSave.ProductionUnitId,
                    ContainerId = cropProductionToSave.ContainerId,
                    GrowingMediumId = cropProductionToSave.GrowingMediumId,
                    DropperId = cropProductionToSave.DropperId,
                    Length = cropProductionToSave.Length,
                    Width = cropProductionToSave.Width,
                    BetweenContainerDistance = cropProductionToSave.BetweenContainerDistance,
                    BetweenRowDistance = cropProductionToSave.BetweenRowDistance,
                    BetweenPlantDistance = cropProductionToSave.BetweenPlantDistance,
                    PlantsPerContainer = cropProductionToSave.PlantsPerContainer,
                    NumberOfDroppersPerContainer = cropProductionToSave.NumberOfDroppersPerContainer,
                    WindSpeedMeasurementHeight = cropProductionToSave.WindSpeedMeasurementHeight,
                    Altitude = cropProductionToSave.Altitude,
                    Latitude = cropProductionToSave.Latitude,
                    Longitude = cropProductionToSave.Longitude,
                    DepletionPercentage = cropProductionToSave.DepletionPercentage,
                    DrainThreshold = cropProductionToSave.DrainThreshold,
                    StartDate = cropProductionToSave.StartDate,
                    EndDate = cropProductionToSave.EndDate,
                    Active = cropProductionToSave.Active
                });
            if (updateCropProductionResult != null)
            {
                alertUpdateMessage.Open();
                await GetCropProductionsClick();
            }
            else
            {
                alertErrorMessage.Open();
            }
            editableId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region ManageDevices

    public class CropProductionDeviceModel
    {
        public int Id;
        public string Name;
    }

    public bool manageDevices = false;
    public int cropProductionDevicesId = 0;
    public int selectedAvailableDeviceId = 0;
    public int selectedAssignedDeviceId = 0;
    public AlertMessage? alertDeviceAddedMessage;
    public AlertMessage? alertDeviceRemovedMessage;
    private IQueryable<DeviceModel>? companyDevices;
    private IQueryable<CropProductionDeviceModel>? cropProductionDevices;
    public DateTime newStartDate;

    private AlertMessage? validationErrorMessage1 { get; set; }

    private AlertMessage? validationErrorMessage2 { get; set; }

    async Task EditDevices(int id)
    {
        cropProductionDevicesId = id;
        manageDevices = true;
        await LoadAssignedDevices();
        await LoadAvailableDevices();
    }

    async private Task LoadAssignedDevices()
    {
        cropProductionDevices = null;
        StateHasChanged();
        List<CropProductionDeviceModel> assignedDevicesList = new List<CropProductionDeviceModel>();
        var getAllAssignedDevicesResult = await _cropProductionDeviceService.GetAll(new GetAllCropProductionDevicesRequest() { CropProductionId = cropProductionDevicesId });
        getAllAssignedDevicesResult.CropProductionDevices.ToList().ForEach(cpd => assignedDevicesList.Add(new CropProductionDeviceModel()
            {
                Id = cpd.DeviceId,
                Name = devices.Where(d => d.Id == cpd.DeviceId).FirstOrDefault().DeviceId
            }));
        cropProductionDevices = assignedDevicesList.AsQueryable();
        StateHasChanged();
    }

    async private Task LoadAvailableDevices()
    {
        companyDevices = null;
        StateHasChanged();
        List<DeviceModel> devicesList = new List<DeviceModel>();
        var getAllDevicesResult = await _deviceService.GetAll(new GetAllDevicesRequest() { CropProductionId = cropProductionDevicesId, IncludeInactives = !onlyActives });
        getAllDevicesResult.Devices.Where(r => !cropProductionDevices.Select(x => x.Id).ToList().Contains(r.Id)).ToList().ForEach(d => devicesList.Add(new DeviceModel()
            {
                Id = d.Id,
                DeviceId = d.DeviceId,
                Active = d.Active
            }));
        companyDevices = devicesList.AsQueryable();
        StateHasChanged();
    }



    void CloseEditDevices()
    {
        cropProductionDevicesId = 0;
        manageDevices = false;
        cropProductionDevices = null;
        companyDevices = null;
    }

    async Task AddDeviceToCropProduction()
    {
        try
        {
            if (newStartDate < DateTime.Now.Date || selectedAvailableDeviceId == 0)
            {
                validationErrorMessage2.Open();
                return;
            }
            var createCropProductionDeviceResult = await _cropProductionDeviceService.Create(new CreateCropProductionDeviceRequest()
                {
                    CropProductionId = cropProductionDevicesId,
                    DeviceId = selectedAvailableDeviceId,
                    StartDate = newStartDate
                });
            if (createCropProductionDeviceResult != null)
            {
                //alertDeviceAddedMessage.Open();
                await LoadAssignedDevices();
                await LoadAvailableDevices();
            }
            else
            {
                alertErrorMessage.Open();
            }
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
        }
    }

    async void RemoveDeviceFromCropProduction()
    {
        if (selectedAssignedDeviceId == 0)
        {
            validationErrorMessage1.Open();
            return;
        }
        var deleteCropProductionDeviceResult = await _cropProductionDeviceService.Delete(new DeleteCropProductionDeviceRequest()
            {
                CropProductionId = cropProductionDevicesId,
                DeviceId = selectedAssignedDeviceId
            });
        if (deleteCropProductionDeviceResult != null)
        {
            //alertDeviceRemovedMessage.Open();
            await LoadAssignedDevices();
            await LoadAvailableDevices();
        }
        else
        {
            alertErrorMessage.Open();
        }
    }

    void SelectAvailable(int id) => selectedAvailableDeviceId = id;

    void UnselectAvailable() => selectedAvailableDeviceId = 0;

    void SelectAssigned(int id) => selectedAssignedDeviceId = id;

    void UnselectAssigned() => selectedAssignedDeviceId = 0;

    #endregion

}