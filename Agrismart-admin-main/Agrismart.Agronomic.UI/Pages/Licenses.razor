@page "/Licenses"

@using Agrismart.Agronomic.UI.Services.Models
@using Agrismart.Agronomic.UI.Pages.Components
@using Agrismart.Agronomic.UI.Pages.InputValidators
@using Agrismart.Agronomic.UI.Services.Interfaces
@using Agrismart.Agronomic.UI.Services.Requests
@using Agrismart.Agronomic.UI.Services.Requests.Commands
@using Agrismart.Agronomic.UI.Services.Requests.Queries
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

@inject IClientService _clientService
@inject ILicenseService _licenseService


<PageTitle>Licencias</PageTitle>

<h2>Lista de Licencias</h2>
<hr />

<AlertMessage Title="Mensaje de sistema" @ref="@alertCreateMessage">
    <div class="alert alert-success">
        <p>Licencia creada con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Mensaje de sistema" @ref="@alertUpdateMessage">
    <div class="alert alert-success">
        <p>Licencia actualizada con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Error de sistema" @ref="@alertErrorMessage">
    <div class="alert alert-danger">
        <p><label>Hubo un error en la aplicación. Informe al administrador</label></p>
    </div>
</AlertMessage>

@if (!createNew)
{
    <div class="container-fluid">
        <div class="row align-items-end">
            <div class="col-2">
                <label>Clientes:</label>
                <InputSelect id="clientsList" @bind-Value="@selectedClientId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todos</option>
                    @foreach (var client in clients)
                    {
                        <option value="@client.Id">@client.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label class="form-check-label">Solo Activas</label>
                <input type="checkbox" id="onlyActivesCheck" checked @bind-value="@onlyActives" class="form-check-input" />
            </div>
            <div class="col-2">
                <button class="btn btn-primary" @onclick="GetLicensesClick">Consultar</button>
            </div>
            <div class="col-2">
                <button class="btn btn-secondary" @onclick="NewLicenseClick">Nuevo</button>
            </div>
            <div class="col-2" />

        </div>
    </div>
}
else
{
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <div class="container-fluid">
            <div class="row align-items-end">
                <div class="col-1">
                    <label>Cliente:</label>
                    <InputSelect @bind-Value="@newLicense.ClientId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var client in clients)
                        {
                            <option value="@client.Id">@client.Name</option>
                        }
                    </InputSelect>
                </div>
@*                 <div class="col-1">
                    <label>Llave:</label>
                    <InputText @bind-Value="@newLicense.Key" style="width: 100%" class="form-control form-control-sm" />
                </div> *@
                <div class="col-1">
                    <label>Fecha Vencimiento:</label>
                    <InputDate @bind-Value="@newLicense.ExpirationDate" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Max. Compañías</label>
                    <InputNumber @bind-Value="@newLicense.AllowedCompanies" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Max. Fincas</label>
                    <InputNumber @bind-Value="@newLicense.AllowedFarms" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Max. Usuarios</label>
                    <InputNumber @bind-Value="@newLicense.AllowedUsers" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Max. Unidades de Producción</label>
                    <InputNumber @bind-Value="@newLicense.AllowedProductionUnits" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Max. Producciones de Cultivo</label>
                    <InputNumber @bind-Value="@newLicense.AllowedCropProductions" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-2">
                    <button class="btn btn-primary" @onclick="AddLicenseClick">Agregar</button>
                    <button class="btn btn-danger" @onclick="CancelAddLicenseClick">Cancelar</button>
                </div>
            </div>
            @if (!valid)
            {
                <div class="row p-3">
                    <div class="alert alert-warning col-8" role="alert">
                        Debe seleccionar o digitar algun valor para los atributos marcados en rojo
                    </div>
                </div>
            }
        </div>
    </EditForm>
}
<hr />

@if (licenses == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else
{
    <QuickGrid Items="@licenses" Pagination="@pagination">
        <TemplateColumn Title="Id" Class="tinyColumn">
            <label>@context.Id</label>
        </TemplateColumn>
        <TemplateColumn Title="Cliente" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <InputSelect id="clientList" @bind-Value="@context.ClientId" style="width: 100%">

                    @foreach (var client in clients)
                    {
                        <option value="@client.Id">@client.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label>@context.Client</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Llave" Class="normalColumn">

                <label>@context.Key</label>
            
        </TemplateColumn>
        <TemplateColumn Title="Fecha Vencimiento" Class="bigColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.ExpirationDate" />
            }
            else
            {
                <label>@context.ExpirationDate</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Compañías" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.AllowedCompanies" />
            }
            else
            {
                <label>@context.AllowedCompanies</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Max. Fincas" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.AllowedFarms"  />
            }
            else
            {
                <label>@context.AllowedFarms</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Max. Usuarios" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.AllowedUsers" />
            }
            else
            {
                <label>@context.AllowedUsers</label>
            }
        </TemplateColumn>
                <TemplateColumn Title="Unidades de Producción" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.AllowedProductionUnits"  />
            }
            else
            {
                <label>@context.AllowedProductionUnits</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Producciones de Cultivo" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input @bind="@context.AllowedCropProductions" />
            }
            else
            {
                <label>@context.AllowedCropProductions</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Activo" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input type="checkbox" @bind="@context.Active" />
            }
            else
            {
                @if (context.Active)
                {
                    <i class="bi bi-toggle-on" />
                }
                else
                {
                    <i class="bi bi-toggle-off" />
                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Acciones" Class="bigColum">
            @if (context.Id == editableId)
            {
                <button @onclick="@(() => SaveClick(@context))"><i class="bi bi-floppy-fill"></i></button>
                <button @onclick="@(() => CancelClick())"><i class="bi bi-x-circle-fill"></i></button>
            }
            else
            {
                <button @onclick="@(() => Edit(@context.Id))"><i class="bi bi-pencil-square"></i></button>               
            }
        </TemplateColumn>
    </QuickGrid>
    @if (!validEdit)
    {
        <div class="row p-3">
            <div class="alert alert-warning col-8" role="alert">
                Debe seleccionar o digitar algun valor para los atributos marcados en rojo
            </div>
        </div>
    }
    <Paginator State="@pagination" />
}

@code {

    #region Main

    public class LicenseModel
    {
        public int Id { get; set; }
        [Required]
        public int ClientId { get; set; }
        public string? Client { get; set; }
        public string? Key { get; set; }
        [DataType(DataType.Date)]
        [DateMustBeAfterAttribute("2000/01/01")]
        public DateTime ExpirationDate { get; set; } = DateTime.MinValue;
        [Required]        
        public int? AllowedCompanies { get; set; }
        public int? AllowedFarms { get; set; }
        public int? AllowedUsers { get; set; }
        public int? AllowedProductionUnits { get; set; }
        public int? AllowedCropProductions { get; set; }
        public bool Active { get; set; }
    }

    private AlertMessage? alertErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            editContext = new EditContext(newLicense);

            var getAllClientsResult = await _clientService.GetAll(new GetAllClientsRequest() { IncludeInactives = false });
            clients = getAllClientsResult.Clients.ToList();

            await GetLicensesClick();
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region Search of licenses

    private IQueryable<LicenseModel>? licenses;
    public int selectedClientId = 0;
    public bool onlyActives = true;
    public int visiblePasswordsId = 0;
    public List<Client> clients = new List<Client>();

    PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };

    public async Task GetLicensesClick()
    {
        licenses = null;
        List<LicenseModel> licensesList = new List<LicenseModel>();
        try
        {

            var getAllLicensesResult = await _licenseService.GetAll(new GetAllLicensesRequest() { ClientId = selectedClientId, IncludeInactives = !onlyActives });
            getAllLicensesResult.Licenses.ToList().ForEach(l => licensesList.Add(new LicenseModel()
                {
                    Id = l.Id,
                    ClientId = l.ClientId,
                    Client = clients.Where(cl => cl.Id == l.ClientId).FirstOrDefault().Name,
                    Key = l.Key,
                    ExpirationDate = l.ExpirationDate,
                    AllowedCompanies = l.AllowedCompanies,
                    AllowedFarms = l.AllowedFarms,
                    AllowedUsers = l.AllowedUsers,
                    AllowedProductionUnits = l.AllowedProductionUnits,
                    AllowedCropProductions = l.AllowedCropProductions,
                    Active = l.Active
                }));
            licenses = licensesList.AsQueryable();
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
            licenses = licensesList.AsQueryable();
        }
    }

    #endregion

    #region New license

    public EditContext editContext;
    public LicenseModel newLicense = new LicenseModel();
    public int newClientId = 0;
    public bool createNew = false;
    bool valid = true;
    private AlertMessage alertCreateMessage { get; set; }


    public async Task NewLicenseClick()
    {
        createNew = true;
        valid = true;
        ClearNewModel();
    }

    public async Task AddLicenseClick()
    {
        try
        {
            valid = editContext.Validate();
            if (valid)
            {
                var createLicenseResult = await _licenseService.Create(new CreateLicenseRequest()
                    {
                        ClientId = newLicense.ClientId,

                        ExpirationDate = newLicense.ExpirationDate,
                        AllowedCompanies = newLicense.AllowedCompanies,
                        AllowedFarms = newLicense.AllowedFarms,
                        AllowedUsers = newLicense.AllowedUsers,
                        AllowedProductionUnits = newLicense.AllowedProductionUnits,
                        AllowedCropProductions = newLicense.AllowedCropProductions
                    });
                if (createLicenseResult != null)
                {
                    alertCreateMessage.Open();
                    await GetLicensesClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                CancelAddLicenseClick();
            }
        }
        catch (Exception ex)
        {

        }
    }

    public async Task CancelAddLicenseClick()
    {
        createNew = false;
        valid = true;
    }


    private void ClearNewModel()
    {
        newLicense.ClientId = 0;
        newLicense.ExpirationDate = DateTime.MinValue;
        newLicense.AllowedCompanies = 0;
        newLicense.AllowedFarms = 0;
        newLicense.AllowedUsers = 0;
        newLicense.AllowedProductionUnits = 0;
        newLicense.AllowedCropProductions = 0;
    }

    #endregion

    #region Edit License

    public bool validEdit = true;
    public int editableId = 0;
    private AlertMessage alertUpdateMessage { get; set; }

    void Edit(int id) => editableId = id;

    void CancelClick() { 
        editableId = 0;
        validEdit = true;
        validateStyleDeviceId = "";
        validateStylePassword = "";
    }
    private string validateStyleDeviceId = "";
    private string validateStylePassword = "";

    private async Task SaveClick(LicenseModel licenseToSave)
    {
        try
        {
            licenses = null;
            var updateLicenseResult = await _licenseService.Update(new UpdateLicenseRequest()
                {
                    Id = licenseToSave.Id,
                    ClientId = licenseToSave.ClientId,
                    ExpirationDate = licenseToSave.ExpirationDate,
                    AllowedCompanies = licenseToSave.AllowedCompanies,
                    AllowedFarms = licenseToSave.AllowedFarms,
                    AllowedUsers = licenseToSave.AllowedUsers,
                    AllowedProductionUnits = licenseToSave.AllowedProductionUnits,
                    AllowedCropProductions = licenseToSave.AllowedCropProductions,
                    Active = licenseToSave.Active
                });
            if (updateLicenseResult != null)
            {
                alertUpdateMessage.Open();
                await GetLicensesClick();
            }
            else
            {
                alertErrorMessage.Open();
            }
            editableId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    

    #endregion












}