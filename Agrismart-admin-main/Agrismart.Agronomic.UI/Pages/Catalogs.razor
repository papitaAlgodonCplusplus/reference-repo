@page "/Catalogs"

@using Agrismart.Agronomic.UI.Services.Models;
@using Agrismart.Agronomic.UI.Pages.Components
@using Agrismart.Agronomic.UI.Services.Interfaces
@using Agrismart.Agronomic.UI.Services.Requests
@using Agrismart.Agronomic.UI.Services.Requests.Commands
@using Agrismart.Agronomic.UI.Services.Requests.Queries
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

@inject ICatalogService _catalogService
@inject IClientService _clientService

<PageTitle>Catálogos</PageTitle>

<h2>Lista de Catálogos</h2>
<hr />

<AlertMessage Title="Mensaje de sistema" @ref="@alertCreateMessage">
    <div class="alert alert-success">
        <p>Catálogo creado con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Mensaje de sistema" @ref="@alertUpdateMessage">
    <div class="alert alert-success">
        <p>Catálogo actualizado con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Error de sistema" @ref="@alertErrorMessage">
    <div class="alert alert-danger">
        <p><label>Hubo un error en la aplicación. Informe al administrador</label></p>
    </div>
</AlertMessage>


@if (!createNew)
{
    <div class="container-fluid">
        <div class="row align-items-end">
            <div class="col-2">
                <label>Clientes:</label>
                <InputSelect id="clientsList" @bind-Value="@selectedClientId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todos</option>
                    @foreach (var client in clients)
                    {
                        <option value="@client.Id">@client.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label class="form-check-label">Solo Activos</label>
                <input type="checkbox" id="onlyActivesCheck" checked @bind-value="@onlyActives" class="form-check-input" />
            </div>
            <div class="col-2">
                <button class="btn btn-primary" @onclick="GetCatalogsClick">Consultar</button>
            </div>
            <div class="col-2">
                <button class="btn btn-secondary" @onclick="NewCatalogClick">Nueva</button>
            </div>
            <div class="col-2" />

        </div>
    </div>
}
else
{
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <div class="container-fluid">
            <div class="row align-items-end">
                <div class="col-2">
                    <label>Cliente:</label>
                    <InputSelect @bind-Value="@newCatalog.ClientId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var client in clients)
                        {
                            <option value="@client.Id">@client.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-3">
                    <label>Nombre:</label>
                    <InputText @bind-Value="@newCatalog.Name" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-2">
                    <button class="btn btn-primary" @onclick="AddCatalogClick">Agregar</button>
                    <button class="btn btn-danger" @onclick="CancelAddCatalogClick">Cancelar</button>
                </div>
            </div>
            @if (!valid)
            {
                <div class="row p-3">
                    <div class="alert alert-warning col-8" role="alert">
                        Debe seleccionar o digitar algun valor para los atributos marcados en rojo
                    </div>
                </div>
            }
        </div>
    </EditForm>
}
<hr />

@if (catalogs == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else
{
    <QuickGrid Items="@catalogs" Pagination="@pagination">
        <TemplateColumn Title="Id">
            <label Class="tinyColumn">@context.Id</label>
        </TemplateColumn>
        <TemplateColumn Title="Cliente" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <InputSelect id="clientList" @bind-Value="@context.ClientId" style="width: 100%">

                    @foreach (var client in clients)
                    {
                        <option value="@client.Id">@client.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label>@context.Client</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Nombre">
            @if (context.Id == editableId)
            {
                <input Class="normalColumn" @bind="@context.Name" />
            }
            else
            {
                <label Class="normalColumn">@context.Name</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Activo" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input type="checkbox" @bind="@context.Active" />
            }
            else
            {
                @if (context.Active)
                {
                    <i class="bi bi-toggle-on" />
                }
                else
                {
                    <i class="bi bi-toggle-off" />
                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Acciones" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <button @onclick="@(() => SaveClick(@context))"><i class="bi bi-floppy-fill"></i></button>
                <button @onclick="@(() => CancelEditClick())"><i class="bi bi-x-circle-fill"></i></button>
            }
            else
            {
                @if (context.ClientId > 0)
                {
                    <button @onclick="@(() => EditClick(@context.Id))"><i class="bi bi-pencil-square"></i></button>
                }               
            }
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@pagination" />
}

@code {

    #region Main

    public class CatalogModel
    {
        public int Id { get; set; }
        public int ClientId { get; set; }
        public string? Client { get; set; }
        public string? Name { get; set; }
        public bool Active { get; set; }
    }

    private AlertMessage? alertErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            editContext = new EditContext(newCatalog);

            var getAllClientsResult = await _clientService.GetAll(new GetAllClientsRequest() { IncludeInactives = false });
            clients = getAllClientsResult.Clients.ToList();           

            await GetCatalogsClick();
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region Search of Catalogs

    private IQueryable<CatalogModel>? catalogs;
    public int selectedClientId = 0;
    public bool onlyActives = true;
    public List<Client> clients = new List<Client>();
    PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };

    public async Task GetCatalogsClick()
    {
        catalogs = null;
        List<CatalogModel> catalogsList = new List<CatalogModel>();
        try
        {           

            var getAllCatalogsResult = await _catalogService.GetAll(new GetAllCatalogsRequest() { ClientId = selectedClientId, IncludeInactives = !onlyActives });

            if (getAllCatalogsResult.Catalogs != null)
            {
                getAllCatalogsResult.Catalogs.ToList().ForEach(c => catalogsList.Add(new CatalogModel()
                    {
                        Id = c.Id,
                        ClientId = c.ClientId,
                        Client = c.ClientId == 0 ? "Todos" : clients.Where(cl => cl.Id == c.ClientId).FirstOrDefault().Name,                      
                        Name = c.Name,                        
                        Active = c.Active
                    }));

                catalogs = catalogsList.AsQueryable();
            }
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
            catalogs = catalogsList.AsQueryable();
        }
    }

    #endregion

    #region New Catalog

    public EditContext? editContext;
    public CatalogModel newCatalog = new CatalogModel();
    public bool createNew = false;
    public int newClientId = 0;
    bool valid = true;
    private AlertMessage alertCreateMessage { get; set; }
    
    public async Task NewCatalogClick()
    {
        createNew = true;
        valid = true;
        ClearNewModel();
    }

    public async Task CancelAddCatalogClick()
    {
        createNew = false;
        valid = true;
    }

    public async Task AddCatalogClick()
    {
        try
        {
            valid = editContext.Validate();
            if (valid)
            {
                var createCatalogResult = await _catalogService.Create(new CreateCatalogRequest()
                    {
                        ClientId = newCatalog.ClientId,                       
                        Name = newCatalog.Name
                    });
                if (createCatalogResult != null)
                {
                    alertCreateMessage.Open();
                    await GetCatalogsClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                CancelAddCatalogClick();
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void ClearNewModel()
    {
        newCatalog.ClientId = 0;
        newCatalog.Name = string.Empty;       
    }

    #endregion

    #region Edit Catalog

    public int editableId = 0;
    private AlertMessage alertUpdateMessage { get; set; }

    void EditClick(int id) => editableId = id;

    void CancelEditClick() => editableId = 0;

    private async Task SaveClick(CatalogModel catalogToSave)
    {
        try
        {
            catalogs = null;
            var updateCatalogResult = await _catalogService.Update(new UpdateCatalogRequest()
                {
                    Id = catalogToSave.Id,
                    ClientId = catalogToSave.ClientId,
                    Name = catalogToSave.Name,
                    Active = catalogToSave.Active
                });
            if (updateCatalogResult != null)
            {
                alertUpdateMessage.Open();
                await GetCatalogsClick();
            }
            else
            {
                alertErrorMessage.Open();
            }
            editableId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    #endregion
}