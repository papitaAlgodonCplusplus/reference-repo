@page "/MeasurementVariables"

@using Agrismart.Agronomic.UI.Services.Models;
@using Agrismart.Agronomic.UI.Pages.Components
@using Agrismart.Agronomic.UI.Services.Interfaces
@using Agrismart.Agronomic.UI.Services.Requests
@using Agrismart.Agronomic.UI.Services.Requests.Commands
@using Agrismart.Agronomic.UI.Services.Requests.Queries
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

@inject IMeasurementVariableService _measurementVariableService
@inject ICatalogService _catalogService
@inject IMeasurementVariableStandardService _measurementVariableStandardService
@inject IMeasurementUnitService _measurementUnitService

<PageTitle>Variables de medición</PageTitle>

<h2>Lista de variables de medición</h2>
<hr />

<AlertMessage Title="Mensaje de sistema" @ref="@alertCreateMessage">
    <div class="alert alert-success">
        <p>Variable de medición creada con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Mensaje de sistema" @ref="@alertUpdateMessage">
    <div class="alert alert-success">
        <p>Variable de medición actualizada con éxito</p>
    </div>
</AlertMessage>

<AlertMessage Title="Error de sistema" @ref="@alertErrorMessage">
    <div class="alert alert-danger">
        <p><label>Hubo un error en la aplicación. Informe al administrador</label></p>
    </div>
</AlertMessage>


@if (!createNew)
{
    <div class="container-fluid">
        <div class="row align-items-end">
            <div class="col-2">
                <label>Catálogo:</label>
                <InputSelect id="catalogsList" @bind-Value="@selectedCatalogId" style="width: 100%" class="form-select form-select-sm">
                    <option value="0">Todos</option>
                    @foreach (var catalog in catalogs)
                    {
                        <option value="@catalog.Id">@catalog.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-2">
                <label class="form-check-label">Solo Activos</label>
                <input type="checkbox" id="onlyActivesCheck" checked @bind-value="@onlyActives" class="form-check-input" />
            </div>
            <div class="col-2">
                <button class="btn btn-primary" @onclick="GetMeasurementVariablesClick">Consultar</button>
            </div>
            <div class="col-2">
                <button class="btn btn-secondary" @onclick="NewMeasurementVariableClick">Nuevo</button>
            </div>
            <div class="col-2" />

        </div>
    </div>
}

else
{
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <div class="container-fluid">
            <div class="row align-items-end">
                <div class="col-2">
                    <label>Catálogo:</label>
                    <InputSelect @bind-Value="@newMeasurementVariable.CatalogId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var catalog in catalogs)
                        {
                            <option value="@catalog.Id">@catalog.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-1">
                    <label>Estandar de medición:</label>
                    <InputSelect @bind-Value="@newMeasurementVariable.MeasurementVariableStandardId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var measurementVariableStandard in measurementVariableStandards)
                        {
                            <option value="@measurementVariableStandard.Id">@measurementVariableStandard.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-1">
                    <label>Nombre:</label>
                    <InputText @bind-Value="@newMeasurementVariable.Name" style="width: 100%" class="form-control form-control-sm" />
                </div>
                <div class="col-1">
                    <label>Unidad de medida:</label>
                    <InputSelect @bind-Value="@newMeasurementVariable.MeasurementUnitId" style="width: 100%" class="form-select form-select-sm">
                        <option value="0">Seleccione una opción</option>
                        @foreach (var measurementUnit in measurementUnits)
                        {
                            <option value="@measurementUnit.Id">@measurementUnit.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-1">
                    <label>Factor de medición:</label>
                    <InputNumber @bind-Value="@newMeasurementVariable.FactorToMeasurementVariableStandard" style="width: 100%" class="form-control form-control-sm" />
                </div>               
                <div class="col-2">
                    <button class="btn btn-primary" @onclick="AddMeasurementVariableClick">Agregar</button>
                    <button class="btn btn-danger" @onclick="CancelAddMeasurementVariableClick">Cancelar</button>
                </div>
            </div>
            @if (!valid)
            {
                <div class="row p-3">
                    <div class="alert alert-warning col-8" role="alert">
                        Debe seleccionar o digitar algun valor para los atributos marcados en rojo
                    </div>
                </div>
            }
        </div>
    </EditForm>

}
<hr />


@if (measurementVariables == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else
{
    <QuickGrid Items="@measurementVariables" Pagination="@pagination">
        <TemplateColumn Title="Id">
            <label Class="tinyColumn">@context.Id</label>
        </TemplateColumn>
        <TemplateColumn Title="Catalogo">
            @if (context.Id == editableId)
            {
                <InputSelect Class="normalColumn" id="catalogList" @bind-Value="@context.CatalogId">

                    @foreach (var catalog in catalogs)
                    {
                        <option value="@catalog.Id">@catalog.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label Class="normalColumn">@context.Catalog</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Estandar de medición">
            @if (context.Id == editableId)
            {
                <InputSelect Class="normalColumn" id="measurementVariableStandardList" @bind-Value="@context.MeasurementVariableStandardId">

                    @foreach (var measurementVariableStandard in measurementVariableStandards)
                    {
                        <option value="@measurementVariableStandard.Id">@measurementVariableStandard.Name</option>
                    }
                </InputSelect>
            }
            else
            {
                <label Class="normalColumn">@context.Catalog</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Nombre">
            @if (context.Id == editableId)
            {
                <input Class="normalColumn" @bind="@context.Name" />
            }
            else
            {
                <label Class="normalColumn">@context.Name</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Unidad de medida">
            @if (context.Id == editableId)
            {
                <InputSelect Class="normalColumn" id="measurementUnitsList" @bind-Value="@context.MeasurementUnitId">
                    @foreach (var measurementUnit in measurementUnits)
                    {
                        <option value="@measurementUnit.Id">@measurementUnit.Name</option>
                    }
                </InputSelect>            
            }
            else
            {
                <label Class="normalColumn">@context.MeasurementUnit</label>
            }
        </TemplateColumn>
        <TemplateColumn Title="Factor de medición">
            @if (context.Id == editableId)
            {
                <input Class="normalColumn" @bind="@context.FactorToMeasurementVariableStandard" />
            }
            else
            {
                <label Class="normalColumn">@context.FactorToMeasurementVariableStandard</label>
            }
        </TemplateColumn>

        <TemplateColumn Title="Activo" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <input type="checkbox" @bind="@context.Active" />
            }
            else
            {
                @if (context.Active)
                {
                    <i class="bi bi-toggle-on" />
                }
                else
                {
                    <i class="bi bi-toggle-off" />
                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Acciones" Class="normalColumn">
            @if (context.Id == editableId)
            {
                <button @onclick="@(() => SaveClick(@context))"><i class="bi bi-floppy-fill"></i></button>
                <button @onclick="@(() => CancelEditClick())"><i class="bi bi-x-circle-fill"></i></button>
            }
            else
            {
                <button @onclick="@(() => EditClick(@context.Id))"><i class="bi bi-pencil-square"></i></button>
            }
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@pagination" />
} 

@code {

    #region Main

    public class MeasurementVariableModel
    {
        public int Id { get; set; }
        public int MeasurementVariableStandardId { get; set; }
        public string? MeasurementVariableStandard { get; set; }
        public int CatalogId { get; set; }
        public string? Catalog { get; set; }
        public string? Name { get; set; }
        public int MeasurementUnitId { get; set; }
        public string? MeasurementUnit { get; set; }
        public double FactorToMeasurementVariableStandard { get; set; }
        public bool Active { get; set; }
    }

    private AlertMessage? alertErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            editContext = new EditContext(newMeasurementVariable);

            var getAllMeasurementVariableStandardsResult = await _measurementVariableStandardService.GetAll(new GetAllMeasurementVariableStandardsRequest() { IncludeInactives = false });
            measurementVariableStandards = getAllMeasurementVariableStandardsResult.MeasurementVariableStandards.ToList();

            var getAllCatalogsResult = await _catalogService.GetAll(new GetAllCatalogsRequest() { IncludeInactives = false });
            catalogs = getAllCatalogsResult.Catalogs.ToList();

            var getAllMeasurementUnitsResult = await _measurementUnitService.GetAll(new GetAllMeasurementUnitsRequest() { IncludeInactives = false });
            measurementUnits = getAllMeasurementUnitsResult.MeasurementUnits.ToList();

            await GetMeasurementVariablesClick();
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region Search of Containers

    private IQueryable<MeasurementVariableModel>? measurementVariables;
    public int selectedCatalogId = 0;
    public bool onlyActives = true;
    public List<MeasurementVariableStandard> measurementVariableStandards = new List<MeasurementVariableStandard>();
    public List<Catalog> catalogs = new List<Catalog>();
    public List<MeasurementUnit> measurementUnits = new List<MeasurementUnit>();
    PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };

    public async Task GetMeasurementVariablesClick()
    {
        measurementVariables = null;
        List<MeasurementVariableModel> measurementVariablesList = new List<MeasurementVariableModel>();
        try
        {

            var getAllMeasurementVariablesResult = await _measurementVariableService.GetAll(new GetAllMeasurementVariablesRequest() { CatalogId = selectedCatalogId, IncludeInactives = !onlyActives });

            if (getAllMeasurementVariablesResult.MeasurementVariables != null)
            {
                getAllMeasurementVariablesResult.MeasurementVariables.ToList().ForEach(mv => measurementVariablesList.Add(new MeasurementVariableModel()
                    {

                        Id = mv.Id,
                        MeasurementVariableStandardId = mv.MeasurementVariableStandardId,
                        MeasurementVariableStandard = measurementVariableStandards.Where(mbs => mbs.Id == mv.MeasurementVariableStandardId).FirstOrDefault()?.Name,
                        CatalogId = mv.CatalogId,
                        Catalog = catalogs.Where(cat => cat.Id == mv.CatalogId).FirstOrDefault()?.Name,
                        Name = mv.Name,
                        MeasurementUnitId = mv.MeasurementUnitId,
                        MeasurementUnit = measurementUnits.Where(mu => mu.Id == mv.MeasurementUnitId).FirstOrDefault()?.Name,
                        FactorToMeasurementVariableStandard = mv.FactorToMeasurementVariableStandard,
                        Active = mv.Active
                    }));

                measurementVariables = measurementVariablesList.AsQueryable();
            }
        }
        catch (Exception ex)
        {
            alertErrorMessage.Open();
            measurementVariables = measurementVariablesList.AsQueryable();
        }
    }

    #endregion

    #region New MeasurementVariable

    public EditContext? editContext;
    public MeasurementVariableModel newMeasurementVariable = new MeasurementVariableModel();
    public bool createNew = false;
    public int newCatalogId = 0;
    bool valid = true;
    private AlertMessage alertCreateMessage { get; set; }

    public async Task NewMeasurementVariableClick()
    {
        createNew = true;
        valid = true;
        ClearNewModel();
    }

    public async Task CancelAddMeasurementVariableClick()
    {
        createNew = false;
        valid = true;
    }

    public async Task AddMeasurementVariableClick()
    {
        try
        {
            valid = editContext.Validate();
            if (valid)
            {
                var createMeasurementVariableResult = await _measurementVariableService.Create(new CreateMeasurementVariableRequest()
                    {
                        MeasurementVariableStandardId = newMeasurementVariable.MeasurementVariableStandardId,
                        CatalogId = newMeasurementVariable.CatalogId,
                        Name = newMeasurementVariable.Name,
                        MeasurementUnitId = newMeasurementVariable.MeasurementUnitId,
                        FactorToMeasurementVariableStandard = newMeasurementVariable.FactorToMeasurementVariableStandard,
                    });
                if (createMeasurementVariableResult != null)
                {
                    alertCreateMessage.Open();
                    await GetMeasurementVariablesClick();
                }
                else
                {
                    alertErrorMessage.Open();
                }
                CancelAddMeasurementVariableClick();
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void ClearNewModel()
    {
        newMeasurementVariable.CatalogId = 0;

    }

    #endregion

    #region Edit MeasurementVariable

    public int editableId = 0;
    private AlertMessage alertUpdateMessage { get; set; }

    void EditClick(int id) => editableId = id;

    void CancelEditClick() => editableId = 0;

    private async Task SaveClick(MeasurementVariableModel measurementVariableToSave)
    {
        try
        {
            measurementVariables = null;
            var updateMeasurementVariableResult = await _measurementVariableService.Update(new UpdateMeasurementVariableRequest()
            {
                Id = measurementVariableToSave.Id,
                MeasurementVariableStandardId = measurementVariableToSave.MeasurementVariableStandardId,
                CatalogId = measurementVariableToSave.CatalogId,
                Name = measurementVariableToSave.Name,
                MeasurementUnitId = measurementVariableToSave.MeasurementUnitId,
                FactorToMeasurementVariableStandard = measurementVariableToSave.FactorToMeasurementVariableStandard,
                Active = measurementVariableToSave.Active
            });
            if (updateMeasurementVariableResult != null)
            {
                alertUpdateMessage.Open();
                await GetMeasurementVariablesClick();
            }
            else
            {
                alertErrorMessage.Open();
            }
            editableId = 0;
        }
        catch (Exception ex)
        {
        }
    }

    #endregion
}